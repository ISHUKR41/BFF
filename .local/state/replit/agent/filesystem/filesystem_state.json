{"file_contents":{"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/TournamentPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { \n  Trophy, Users, Shield, AlertCircle, \n  Clock, Coins, UserCircle, Zap, \n  CheckCircle, BookOpen, CreditCard, Award,\n  Swords, Target, Info\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { SlotCounter } from \"@/components/SlotCounter\";\nimport { RegistrationForm } from \"@/components/RegistrationForm\";\nimport { TournamentFullAlert } from \"@/components/TournamentFullAlert\";\nimport { type GameType, type TournamentType, type Tournament, TOURNAMENT_CONFIG } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport bgmiBanner from \"@assets/generated_images/BGMI_tournament_hero_banner_b2150cce.png\";\nimport freeFireBanner from \"@assets/generated_images/Free_Fire_tournament_hero_banner_dddd7ca1.png\";\n\ninterface TournamentPageProps {\n  gameType: GameType;\n}\n\n// Countdown Timer Component\nfunction CountdownTimer({ gameType }: { gameType: GameType }) {\n  const [timeLeft, setTimeLeft] = useState({\n    hours: 12,\n    minutes: 30,\n    seconds: 45\n  });\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        let { hours, minutes, seconds } = prev;\n        \n        if (seconds > 0) {\n          seconds--;\n        } else if (minutes > 0) {\n          minutes--;\n          seconds = 59;\n        } else if (hours > 0) {\n          hours--;\n          minutes = 59;\n          seconds = 59;\n        }\n        \n        return { hours, minutes, seconds };\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const gameColor = gameType === \"bgmi\" ? \"text-bgmi\" : \"text-freefire\";\n  const gameBg = gameType === \"bgmi\" ? \"bg-bgmi/10\" : \"bg-freefire/10\";\n  const gameBorder = gameType === \"bgmi\" ? \"border-bgmi/30\" : \"border-freefire/30\";\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className={`${gameBg} ${gameBorder} border-2 rounded-md p-4 mb-8`}\n      data-testid=\"countdown-timer\"\n    >\n      <div className=\"flex flex-col md:flex-row items-center justify-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Clock className={`w-5 h-5 ${gameColor}`} />\n          <span className=\"font-semibold\">Tournament starts in:</span>\n        </div>\n        <div className=\"flex gap-2\">\n          {[\n            { value: timeLeft.hours, label: 'Hours', testId: 'countdown-hours' },\n            { value: timeLeft.minutes, label: 'Minutes', testId: 'countdown-minutes' },\n            { value: timeLeft.seconds, label: 'Seconds', testId: 'countdown-seconds' }\n          ].map((item, idx) => (\n            <div key={idx}>\n              <motion.div\n                key={item.value}\n                initial={{ scale: 1.1 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.2 }}\n                className={`${gameBg} ${gameBorder} border rounded-md px-3 py-2 min-w-[60px] text-center`}\n                data-testid={item.testId}\n              >\n                <div className={`text-2xl font-bold ${gameColor}`}>\n                  {String(item.value).padStart(2, '0')}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">{item.label}</div>\n              </motion.div>\n              {idx < 2 && <span className=\"text-2xl font-bold mx-1\">:</span>}\n            </div>\n          ))}\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n\nexport default function TournamentPage({ gameType }: TournamentPageProps) {\n  const [activeTab, setActiveTab] = useState<TournamentType>(\"solo\");\n  const { toast } = useToast();\n\n  // Fetch all tournaments\n  const { data: tournaments, isLoading } = useQuery<Tournament[]>({\n    queryKey: [\"/api/tournaments\"],\n  });\n\n  // Get current tournament data\n  const getTournamentData = (type: TournamentType) => {\n    return tournaments?.find(\n      (t) => t.gameType === gameType && t.tournamentType === type\n    ) || {\n      registeredCount: 0,\n      maxSlots: TOURNAMENT_CONFIG[gameType][type].maxSlots,\n      qrCodeUrl: null,\n    };\n  };\n\n  // Create registration mutation\n  const createRegistrationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/registrations\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      toast({\n        title: \"Registration Submitted!\",\n        description: \"Your registration is pending approval. You'll be notified soon.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const config = TOURNAMENT_CONFIG[gameType][activeTab];\n  const gameTitle = gameType === \"bgmi\" ? \"BGMI\" : \"Free Fire\";\n  const gameColor = gameType === \"bgmi\" ? \"text-bgmi\" : \"text-freefire\";\n  const gameBg = gameType === \"bgmi\" ? \"bg-bgmi\" : \"bg-freefire\";\n  const gameBgLight = gameType === \"bgmi\" ? \"bg-bgmi/10\" : \"bg-freefire/10\";\n  const gameBorder = gameType === \"bgmi\" ? \"border-bgmi\" : \"border-freefire\";\n  const bannerImage = gameType === \"bgmi\" ? bgmiBanner : freeFireBanner;\n\n  const handleSubmit = async (data: any) => {\n    await createRegistrationMutation.mutateAsync(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pt-20 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-64 mb-4\" />\n          <Skeleton className=\"h-6 w-96 mb-8\" />\n          <Skeleton className=\"h-48 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  const getTabIcon = (type: TournamentType) => {\n    switch (type) {\n      case \"solo\":\n        return <Users className=\"w-4 h-4\" />;\n      case \"duo\":\n        return <Users className=\"w-4 h-4\" />;\n      case \"squad\":\n        return <Shield className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pt-20 pb-16\">\n      {/* Enhanced Hero Banner */}\n      <div className=\"relative h-80 md:h-96 overflow-hidden mb-8\">\n        <motion.img \n          src={bannerImage} \n          alt={`${gameTitle} Tournament Banner`}\n          className=\"w-full h-full object-cover\"\n          initial={{ scale: 1.1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.8 }}\n        />\n        {/* Multiple gradient overlays for better text readability */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black via-black/60 to-transparent\" />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/40 via-transparent to-black/40\" />\n        \n        {/* Animated particles effect */}\n        <div className=\"absolute inset-0 opacity-30\">\n          {[...Array(15)].map((_, i) => (\n            <motion.div\n              key={i}\n              className={`absolute w-2 h-2 ${gameBg} rounded-full`}\n              initial={{ \n                x: `${Math.random() * 100}%`, \n                y: `${Math.random() * 100}%`,\n                opacity: 0.2\n              }}\n              animate={{ \n                y: [`${Math.random() * 100}%`, `${Math.random() * 100}%`],\n                opacity: [0.2, 0.5, 0.2]\n              }}\n              transition={{ \n                duration: 3 + Math.random() * 2,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Hero content */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center px-4\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"flex items-center justify-center gap-4 mb-6\"\n            >\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5 }}\n              >\n                <Trophy className={`w-12 h-12 md:w-16 md:h-16 ${gameColor}`} data-testid=\"icon-trophy-hero\" />\n              </motion.div>\n              <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-black tracking-tight text-white drop-shadow-2xl\" data-testid=\"text-hero-title\">\n                {gameTitle}\n              </h1>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n              className={`inline-block px-6 py-2 ${gameBgLight} ${gameBorder} border-2 rounded-full mb-6`}\n            >\n              <span className={`text-xl md:text-2xl font-bold ${gameColor}`}>\n                TOURNAMENT 2025\n              </span>\n            </motion.div>\n\n            <motion.p\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.6 }}\n              className=\"text-lg md:text-2xl text-white/95 drop-shadow-lg max-w-3xl mx-auto font-medium\"\n            >\n              Choose your tournament mode and compete for amazing prizes\n            </motion.p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n        {/* Countdown Timer */}\n        <CountdownTimer gameType={gameType} />\n\n        {/* Tournament Modes Tabs */}\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as TournamentType)} className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-3 h-auto p-1\">\n            <TabsTrigger value=\"solo\" className=\"gap-2 py-3\" data-testid=\"tab-solo\">\n              {getTabIcon(\"solo\")}\n              <span>Solo</span>\n              <Badge variant=\"secondary\" className=\"ml-auto\">{getTournamentData(\"solo\").registeredCount}/{getTournamentData(\"solo\").maxSlots}</Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"duo\" className=\"gap-2 py-3\" data-testid=\"tab-duo\">\n              {getTabIcon(\"duo\")}\n              <span>Duo</span>\n              <Badge variant=\"secondary\" className=\"ml-auto\">{getTournamentData(\"duo\").registeredCount}/{getTournamentData(\"duo\").maxSlots}</Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"squad\" className=\"gap-2 py-3\" data-testid=\"tab-squad\">\n              {getTabIcon(\"squad\")}\n              <span>Squad</span>\n              <Badge variant=\"secondary\" className=\"ml-auto\">{getTournamentData(\"squad\").registeredCount}/{getTournamentData(\"squad\").maxSlots}</Badge>\n            </TabsTrigger>\n          </TabsList>\n\n          {[\"solo\", \"duo\", \"squad\"].map((mode) => {\n            const tournamentData = getTournamentData(mode as TournamentType);\n            return (\n            <TabsContent key={mode} value={mode} className=\"space-y-8\">\n              {/* Slot Counter */}\n              <SlotCounter\n                registered={tournamentData.registeredCount}\n                total={tournamentData.maxSlots}\n                gameType={gameType}\n              />\n\n              <div className=\"grid lg:grid-cols-3 gap-8\">\n                {/* Main Content */}\n                <div className=\"lg:col-span-2 space-y-8\">\n                  {/* Rules & Regulations */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <Card className={`${gameBorder} border-t-4`}>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"flex items-center gap-3 mb-6\">\n                          <BookOpen className={`w-6 h-6 ${gameColor}`} />\n                          <h2 className=\"text-2xl font-bold\">Rules & Regulations</h2>\n                        </div>\n                        <Accordion type=\"single\" collapsible className=\"w-full space-y-3\">\n                          <AccordionItem value=\"general\" className=\"border rounded-md px-4 bg-blue-50/50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\" data-testid=\"accordion-general\">\n                            <AccordionTrigger className=\"hover:no-underline\">\n                              <div className=\"flex items-center gap-2\">\n                                <Shield className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                                <span className=\"font-semibold\">General Rules</span>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent className=\"text-muted-foreground space-y-2 pt-4\">\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>All matches must be played on the latest official version of {gameTitle}</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>Only mobile phones are allowed. Emulators, tablets are strictly prohibited</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>Players must ensure stable internet connection before starting</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>No use of hacks, mod APKs, or third-party software</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>No teaming with players outside your registered team</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-blue-600 dark:text-blue-400\" />\n                                <p>Respectful behavior is mandatory - no abuse or toxic behavior</p>\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n\n                          <AccordionItem value=\"registration\" className={`border rounded-md px-4 ${gameBgLight} ${gameBorder}`} data-testid=\"accordion-registration\">\n                            <AccordionTrigger className=\"hover:no-underline\">\n                              <div className=\"flex items-center gap-2\">\n                                <CreditCard className={`w-5 h-5 ${gameColor}`} />\n                                <span className=\"font-semibold\">Registration & Payment</span>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent className=\"text-muted-foreground space-y-2 pt-4\">\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>Entry fee: ₹{config.entryFee} per {mode === \"solo\" ? \"player\" : \"team\"}</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>Payment must be completed via UPI to the provided QR code</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>Upload clear payment screenshot with visible transaction ID</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>Registration will be confirmed after admin approval</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>Room ID and password will be shared 30 minutes before match</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n                                <p>No refunds after registration approval</p>\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n\n                          <AccordionItem value=\"prizes\" className=\"border rounded-md px-4 bg-green-50/50 dark:bg-green-950/20 border-green-200 dark:border-green-800\" data-testid=\"accordion-prizes\">\n                            <AccordionTrigger className=\"hover:no-underline\">\n                              <div className=\"flex items-center gap-2\">\n                                <Trophy className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                                <span className=\"font-semibold\">Prize Structure</span>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent className=\"text-muted-foreground space-y-2 pt-4\">\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Winner: ₹{config.winner}</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Runner Up: ₹{config.runnerUp}</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Per Kill: ₹{config.perKill}</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Prizes will be transferred within 24 hours of match completion</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Winners must provide valid UPI details for prize transfer</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-green-600 dark:text-green-400\" />\n                                <p>Screenshot verification may be required for prize claims</p>\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n\n                          <AccordionItem value=\"conduct\" className=\"border rounded-md px-4 bg-red-50/50 dark:bg-red-950/20 border-red-200 dark:border-red-800\" data-testid=\"accordion-conduct\">\n                            <AccordionTrigger className=\"hover:no-underline\">\n                              <div className=\"flex items-center gap-2\">\n                                <AlertCircle className=\"w-5 h-5 text-red-600 dark:text-red-400\" />\n                                <span className=\"font-semibold\">Fair Play & Disqualification</span>\n                              </div>\n                            </AccordionTrigger>\n                            <AccordionContent className=\"text-muted-foreground space-y-2 pt-4\">\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Suspected cheating will result in immediate disqualification</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Admin decisions are final and binding</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Players must join match within 5 minutes of start time</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Late entries will not be accommodated</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Disconnections due to network issues are player's responsibility</p>\n                              </div>\n                              <div className=\"flex items-start gap-2\">\n                                <CheckCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0 text-red-600 dark:text-red-400\" />\n                                <p>Any dispute must be raised within 1 hour of match completion</p>\n                              </div>\n                            </AccordionContent>\n                          </AccordionItem>\n                        </Accordion>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n\n                  {/* Registration Form or Full Alert */}\n                  {tournamentData.registeredCount < tournamentData.maxSlots ? (\n                    <RegistrationForm\n                      gameType={gameType}\n                      tournamentType={mode as TournamentType}\n                      qrCodeUrl={tournamentData.qrCodeUrl || \"/attached_assets/payment-qr-new.jpg\"}\n                      onSubmit={handleSubmit}\n                      isSubmitting={createRegistrationMutation.isPending}\n                    />\n                  ) : (\n                    <TournamentFullAlert gameType={gameType} />\n                  )}\n                </div>\n\n                {/* Sidebar */}\n                <div className=\"space-y-6\">\n                  {/* Quick Info */}\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.5, delay: 0.2 }}\n                  >\n                    <Card className={`${gameBorder} border-l-4`}>\n                      <CardContent className=\"pt-6 space-y-4\">\n                        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                          <Info className={`w-5 h-5 ${gameColor}`} />\n                          Tournament Info\n                        </h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/50 gap-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Target className={`w-4 h-4 ${gameColor}`} />\n                              <span className=\"text-sm text-muted-foreground\">Mode</span>\n                            </div>\n                            <Badge className={`${gameBgLight} ${gameColor} border-0 capitalize`} data-testid={`badge-mode-${mode}`}>{mode}</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/50 gap-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Coins className={`w-4 h-4 ${gameColor}`} />\n                              <span className=\"text-sm text-muted-foreground\">Entry Fee</span>\n                            </div>\n                            <span className={`font-bold ${gameColor}`} data-testid=\"text-entry-fee\">₹{config.entryFee}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/50 gap-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Users className={`w-4 h-4 ${gameColor}`} />\n                              <span className=\"text-sm text-muted-foreground\">Max Slots</span>\n                            </div>\n                            <span className=\"font-semibold\" data-testid=\"text-max-slots\">{tournamentData.maxSlots}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/50 gap-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <UserCircle className={`w-4 h-4 ${gameColor}`} />\n                              <span className=\"text-sm text-muted-foreground\">Team Size</span>\n                            </div>\n                            <span className=\"font-semibold\" data-testid=\"text-team-size\">{config.maxPlayers} {config.maxPlayers === 1 ? \"Player\" : \"Players\"}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n\n                  {/* Prize Pool */}\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.5, delay: 0.3 }}\n                  >\n                    <Card className=\"border-success/50 border-2\">\n                      <CardContent className=\"pt-6\">\n                        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                          <Trophy className=\"w-5 h-5 text-success\" />\n                          Prize Pool\n                        </h3>\n                        <div className=\"space-y-3\">\n                          {/* Winner - Highlighted */}\n                          <motion.div \n                            className=\"relative overflow-hidden p-4 rounded-md bg-gradient-to-br from-success/20 to-success/10 border-2 border-success\"\n                            whileHover={{ scale: 1.02 }}\n                            transition={{ duration: 0.2 }}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-3\">\n                                <div className=\"p-2 rounded-full bg-success/20\">\n                                  <Award className=\"w-5 h-5 text-success\" />\n                                </div>\n                                <div>\n                                  <div className=\"text-xs text-success font-medium uppercase\">Winner</div>\n                                  <div className=\"text-sm text-muted-foreground\">1st Place</div>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-3xl font-black text-success\" data-testid=\"text-prize-winner\">₹{config.winner}</div>\n                              </div>\n                            </div>\n                            <div className=\"absolute top-0 right-0 w-32 h-32 bg-success/5 rounded-full -mr-16 -mt-16\" />\n                          </motion.div>\n\n                          {/* Runner Up */}\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/80 border border-border\">\n                            <div className=\"flex items-center gap-2\">\n                              <Trophy className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"text-sm font-medium\">Runner Up</span>\n                            </div>\n                            <span className=\"text-xl font-bold\" data-testid=\"text-prize-runner\">₹{config.runnerUp}</span>\n                          </div>\n\n                          {/* Per Kill */}\n                          <div className=\"flex items-center justify-between p-3 rounded-md bg-muted/80 border border-border\">\n                            <div className=\"flex items-center gap-2\">\n                              <Swords className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"text-sm font-medium\">Per Kill</span>\n                            </div>\n                            <span className=\"text-xl font-bold\" data-testid=\"text-prize-kill\">₹{config.perKill}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n\n                  {/* Support */}\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.5, delay: 0.4 }}\n                  >\n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                          <Zap className={`w-5 h-5 ${gameColor}`} />\n                          Need Help?\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Contact support for any queries regarding registration or tournament rules.\n                        </p>\n                        <Badge variant=\"outline\" className={`w-full justify-center py-3 ${gameBorder} ${gameColor} hover:${gameBgLight}`} data-testid=\"badge-support\">\n                          Support Available 24/7\n                        </Badge>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                </div>\n              </div>\n            </TabsContent>\n          );\n          })}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32020},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Header } from \"@/components/Header\";\nimport Home from \"@/pages/Home\";\nimport TournamentPage from \"@/pages/TournamentPage\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/bgmi\">\n        {() => <TournamentPage gameType=\"bgmi\" />}\n      </Route>\n      <Route path=\"/freefire\">\n        {() => <TournamentPage gameType=\"freefire\" />}\n      </Route>\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Header />\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1340},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/SlotCounter.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Users, AlertCircle, TrendingUp } from \"lucide-react\";\n\ninterface SlotCounterProps {\n  registered: number;\n  total: number;\n  gameType: \"bgmi\" | \"freefire\";\n}\n\nexport function SlotCounter({ registered, total, gameType }: SlotCounterProps) {\n  const [animatedCount, setAnimatedCount] = useState(registered);\n  const available = total - registered;\n  const percentage = (registered / total) * 100;\n  \n  // Determine color based on availability\n  const getStatusColor = () => {\n    if (percentage >= 80) return \"text-destructive\";\n    if (percentage >= 50) return \"text-warning\";\n    return \"text-success\";\n  };\n\n  const getProgressColor = () => {\n    if (percentage >= 80) return \"bg-destructive\";\n    if (percentage >= 50) return \"bg-warning\";\n    return \"bg-success\";\n  };\n\n  const getCircleColor = () => {\n    if (percentage >= 80) return \"stroke-destructive\";\n    if (percentage >= 50) return \"stroke-warning\";\n    return \"stroke-success\";\n  };\n\n  useEffect(() => {\n    // Animate count change\n    let start = animatedCount;\n    const end = registered;\n    const duration = 500;\n    const steps = 30;\n    const stepValue = (end - start) / steps;\n    let currentStep = 0;\n\n    const timer = setInterval(() => {\n      currentStep++;\n      if (currentStep >= steps) {\n        setAnimatedCount(end);\n        clearInterval(timer);\n      } else {\n        setAnimatedCount(Math.round(start + stepValue * currentStep));\n      }\n    }, duration / steps);\n\n    return () => clearInterval(timer);\n  }, [registered]);\n\n  const gameColor = gameType === \"bgmi\" ? \"text-bgmi\" : \"text-freefire\";\n  const gameBg = gameType === \"bgmi\" ? \"bg-bgmi/10\" : \"bg-freefire/10\";\n  const gameBorder = gameType === \"bgmi\" ? \"border-bgmi/30\" : \"border-freefire/30\";\n\n  // Circular progress calculations\n  const radius = 60;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      data-testid=\"slot-counter\"\n    >\n      <Card className={`border-l-4 ${gameBorder} ${gameBg}`}>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid md:grid-cols-[auto_1fr] gap-6 items-center\">\n            {/* Circular Progress Indicator */}\n            <motion.div \n              className=\"relative w-32 h-32 mx-auto md:mx-0\"\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <svg className=\"w-32 h-32 transform -rotate-90\">\n                {/* Background circle */}\n                <circle\n                  cx=\"64\"\n                  cy=\"64\"\n                  r={radius}\n                  stroke=\"currentColor\"\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                  className=\"text-muted/30\"\n                />\n                {/* Progress circle */}\n                <motion.circle\n                  cx=\"64\"\n                  cy=\"64\"\n                  r={radius}\n                  stroke=\"currentColor\"\n                  strokeWidth=\"8\"\n                  fill=\"none\"\n                  className={getCircleColor()}\n                  strokeLinecap=\"round\"\n                  strokeDasharray={circumference}\n                  initial={{ strokeDashoffset: circumference }}\n                  animate={{ strokeDashoffset }}\n                  transition={{ duration: 1, ease: \"easeInOut\" }}\n                />\n              </svg>\n              {/* Center text */}\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                <motion.span \n                  className={`text-3xl font-bold ${getStatusColor()}`}\n                  key={animatedCount}\n                  initial={{ scale: 1.2 }}\n                  animate={{ scale: 1 }}\n                  transition={{ duration: 0.3 }}\n                  data-testid=\"text-registered-count\"\n                >\n                  {animatedCount}\n                </motion.span>\n                <span className=\"text-xs text-muted-foreground\" data-testid=\"text-total-slots\">of {total}</span>\n              </div>\n            </motion.div>\n\n            {/* Details Section */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n                <div>\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <TrendingUp className={`w-5 h-5 ${gameColor}`} />\n                    <span className=\"text-sm font-medium text-muted-foreground\">Tournament Slots</span>\n                  </div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className={`text-3xl md:text-4xl font-bold ${getStatusColor()}`} data-testid=\"text-slots-filled\">\n                      {animatedCount}\n                    </span>\n                    <span className=\"text-xl md:text-2xl text-muted-foreground\" data-testid=\"text-slots-total\">/ {total}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Users className={`w-5 h-5 ${gameColor}`} />\n                  {available > 0 ? (\n                    <Badge className=\"bg-success/10 text-success hover:bg-success/20 border-success/20\" data-testid=\"badge-slots-available\">\n                      {available} Available\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"destructive\" data-testid=\"badge-slots-full\">Full</Badge>\n                  )}\n                </div>\n              </div>\n\n              {/* Progress bar with percentage */}\n              <div className=\"space-y-2\">\n                <Progress value={percentage} className=\"h-2\" indicatorClassName={getProgressColor()} data-testid=\"progress-slots\" />\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span data-testid=\"text-percentage-filled\">{percentage.toFixed(0)}% filled</span>\n                  <span data-testid=\"text-slots-remaining\">{available > 0 ? `${available} slots left` : \"Tournament full\"}</span>\n                </div>\n              </div>\n\n              {/* Urgency messages with animations */}\n              {available <= 10 && available > 0 && (\n                <motion.div \n                  className={`p-3 rounded-md flex items-start gap-2 ${\n                    available <= 5 \n                      ? \"bg-destructive/10 border border-destructive/20\" \n                      : \"bg-warning/10 border border-warning/20\"\n                  }`}\n                  initial={{ scale: 0.95, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  transition={{ duration: 0.3 }}\n                  data-testid=\"alert-low-slots\"\n                >\n                  <AlertCircle className={`w-4 h-4 mt-0.5 flex-shrink-0 ${\n                    available <= 5 ? \"text-destructive\" : \"text-warning\"\n                  }`} />\n                  <div>\n                    <p className={`text-xs font-medium ${\n                      available <= 5 ? \"text-destructive\" : \"text-warning\"\n                    }`}>\n                      {available <= 5 \n                        ? `Only ${available} slots left! Register now before it's too late!`\n                        : `Hurry up! Only ${available} slots remaining.`\n                      }\n                    </p>\n                  </div>\n                </motion.div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":7937},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/storage.ts":{"content":"import {\n  type Registration,\n  type InsertRegistration,\n  type Tournament,\n  type InsertTournament,\n  type Admin,\n  type InsertAdmin,\n  type ActivityLog,\n  type InsertActivityLog,\n  type GameType,\n  type TournamentType,\n  TOURNAMENT_CONFIG,\n  admins,\n  tournaments,\n  registrations,\n  activityLogs,\n} from \"@shared/schema\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq, and, or, like, desc, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nconst connectionString = process.env.DATABASE_URL!;\nconst sqlClient = neon(connectionString);\nconst db = drizzle(sqlClient);\n\nexport interface IStorage {\n  // Admin operations\n  getAdmin(id: string): Promise<Admin | undefined>;\n  getAdminByUsername(username: string): Promise<Admin | undefined>;\n  createAdmin(admin: InsertAdmin): Promise<Admin>;\n  \n  // Tournament operations\n  getTournament(gameType: GameType, tournamentType: TournamentType): Promise<Tournament | undefined>;\n  getAllTournaments(): Promise<Tournament[]>;\n  incrementTournamentCount(gameType: GameType, tournamentType: TournamentType): Promise<Tournament>;\n  decrementTournamentCount(gameType: GameType, tournamentType: TournamentType): Promise<Tournament>;\n  resetTournament(gameType: GameType, tournamentType: TournamentType): Promise<Tournament>;\n  updateQRCode(gameType: GameType, tournamentType: TournamentType, qrCodeUrl: string): Promise<Tournament>;\n  \n  // Registration operations\n  createRegistration(registration: InsertRegistration): Promise<Registration>;\n  getRegistration(id: string): Promise<Registration | undefined>;\n  getAllRegistrations(): Promise<Registration[]>;\n  getRegistrationsByGame(gameType: GameType, tournamentType: TournamentType): Promise<Registration[]>;\n  getRegistrationsByStatus(status: string): Promise<Registration[]>;\n  updateRegistrationStatus(id: string, status: \"pending\" | \"approved\" | \"rejected\", adminUsername?: string): Promise<Registration | undefined>;\n  updateRegistrationDetails(id: string, updates: Partial<Registration>, adminUsername?: string): Promise<Registration | undefined>;\n  updateRegistrationNotes(id: string, notes: string, adminUsername?: string): Promise<Registration | undefined>;\n  toggleRegistrationFlag(id: string, adminUsername?: string): Promise<Registration | undefined>;\n  togglePaymentVerification(id: string, adminUsername?: string): Promise<Registration | undefined>;\n  deleteRegistration(id: string): Promise<boolean>;\n  deleteRegistrationsByTournament(gameType: GameType, tournamentType: TournamentType): Promise<void>;\n  searchRegistrations(query: string): Promise<Registration[]>;\n  \n  // Activity log operations\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n  getAllActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  getActivityLogsByTarget(targetType: string, targetId: string): Promise<ActivityLog[]>;\n}\n\nexport class DbStorage implements IStorage {\n  private ready: Promise<void>;\n\n  constructor() {\n    this.ready = this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    // Initialize default admin if not exists\n    await this.initializeDefaultAdmin();\n    \n    // Initialize all tournaments\n    await this.initializeTournaments();\n  }\n\n  async waitReady(): Promise<void> {\n    await this.ready;\n  }\n\n  private async initializeDefaultAdmin() {\n    try {\n      const existingAdmin = await db.select().from(admins).where(eq(admins.username, \"admin\")).limit(1);\n      \n      if (existingAdmin.length === 0) {\n        const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n        await db.insert(admins).values({\n          username: \"admin\",\n          password: hashedPassword,\n        });\n      }\n    } catch (error) {\n      console.error(\"Error initializing default admin:\", error);\n    }\n  }\n\n  private async initializeTournaments() {\n    try {\n      // Default QR code URL\n      const defaultQR = \"/attached_assets/payment-qr-new.jpg\";\n      \n      // Initialize BGMI tournaments\n      for (const type of [\"solo\", \"duo\", \"squad\"] as const) {\n        const config = TOURNAMENT_CONFIG.bgmi[type];\n        const existing = await db.select().from(tournaments)\n          .where(and(eq(tournaments.gameType, \"bgmi\"), eq(tournaments.tournamentType, type)))\n          .limit(1);\n        \n        if (existing.length === 0) {\n          await db.insert(tournaments).values({\n            gameType: \"bgmi\",\n            tournamentType: type,\n            registeredCount: 0,\n            maxSlots: config.maxSlots,\n            qrCodeUrl: defaultQR,\n            isActive: 1,\n          });\n        }\n      }\n\n      // Initialize Free Fire tournaments\n      for (const type of [\"solo\", \"duo\", \"squad\"] as const) {\n        const config = TOURNAMENT_CONFIG.freefire[type];\n        const existing = await db.select().from(tournaments)\n          .where(and(eq(tournaments.gameType, \"freefire\"), eq(tournaments.tournamentType, type)))\n          .limit(1);\n        \n        if (existing.length === 0) {\n          await db.insert(tournaments).values({\n            gameType: \"freefire\",\n            tournamentType: type,\n            registeredCount: 0,\n            maxSlots: config.maxSlots,\n            qrCodeUrl: defaultQR,\n            isActive: 1,\n          });\n        }\n      }\n    } catch (error) {\n      console.error(\"Error initializing tournaments:\", error);\n    }\n  }\n\n  // Admin operations\n  async getAdmin(id: string): Promise<Admin | undefined> {\n    const result = await db.select().from(admins).where(eq(admins.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAdminByUsername(username: string): Promise<Admin | undefined> {\n    const result = await db.select().from(admins).where(eq(admins.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createAdmin(insertAdmin: InsertAdmin): Promise<Admin> {\n    const hashedPassword = await bcrypt.hash(insertAdmin.password, 10);\n    const result = await db.insert(admins).values({\n      username: insertAdmin.username,\n      password: hashedPassword,\n    }).returning();\n    return result[0];\n  }\n\n  // Tournament operations\n  async getTournament(gameType: GameType, tournamentType: TournamentType): Promise<Tournament | undefined> {\n    const result = await db.select().from(tournaments)\n      .where(and(eq(tournaments.gameType, gameType), eq(tournaments.tournamentType, tournamentType)))\n      .limit(1);\n    return result[0];\n  }\n\n  async getAllTournaments(): Promise<Tournament[]> {\n    return await db.select().from(tournaments);\n  }\n\n  async incrementTournamentCount(gameType: GameType, tournamentType: TournamentType): Promise<Tournament> {\n    const result = await db.update(tournaments)\n      .set({ registeredCount: sql`${tournaments.registeredCount} + 1` })\n      .where(and(eq(tournaments.gameType, gameType), eq(tournaments.tournamentType, tournamentType)))\n      .returning();\n    \n    if (!result[0]) {\n      throw new Error(\"Tournament not found\");\n    }\n    return result[0];\n  }\n\n  async decrementTournamentCount(gameType: GameType, tournamentType: TournamentType): Promise<Tournament> {\n    const tournament = await this.getTournament(gameType, tournamentType);\n    if (!tournament) {\n      throw new Error(\"Tournament not found\");\n    }\n    \n    const newCount = Math.max(0, tournament.registeredCount - 1);\n    const result = await db.update(tournaments)\n      .set({ registeredCount: newCount })\n      .where(and(eq(tournaments.gameType, gameType), eq(tournaments.tournamentType, tournamentType)))\n      .returning();\n    \n    return result[0];\n  }\n\n  async resetTournament(gameType: GameType, tournamentType: TournamentType): Promise<Tournament> {\n    // Delete all registrations for this tournament\n    await this.deleteRegistrationsByTournament(gameType, tournamentType);\n    \n    // Reset count to 0\n    const result = await db.update(tournaments)\n      .set({ registeredCount: 0 })\n      .where(and(eq(tournaments.gameType, gameType), eq(tournaments.tournamentType, tournamentType)))\n      .returning();\n    \n    if (!result[0]) {\n      throw new Error(\"Tournament not found\");\n    }\n    return result[0];\n  }\n\n  async updateQRCode(gameType: GameType, tournamentType: TournamentType, qrCodeUrl: string): Promise<Tournament> {\n    const result = await db.update(tournaments)\n      .set({ qrCodeUrl })\n      .where(and(eq(tournaments.gameType, gameType), eq(tournaments.tournamentType, tournamentType)))\n      .returning();\n    \n    if (!result[0]) {\n      throw new Error(\"Tournament not found\");\n    }\n    return result[0];\n  }\n\n  // Registration operations\n  async createRegistration(insertRegistration: InsertRegistration): Promise<Registration> {\n    // Get tournament and check slots atomically\n    const tournament = await this.getTournament(\n      insertRegistration.gameType as GameType,\n      insertRegistration.tournamentType as TournamentType\n    );\n    \n    if (!tournament) {\n      throw new Error(\"Tournament not found\");\n    }\n    \n    if (tournament.registeredCount >= tournament.maxSlots) {\n      throw new Error(\"Tournament is full\");\n    }\n    \n    // Create registration\n    const result = await db.insert(registrations).values({\n      gameType: insertRegistration.gameType,\n      tournamentType: insertRegistration.tournamentType,\n      teamName: insertRegistration.teamName || null,\n      playerName: insertRegistration.playerName,\n      gameId: insertRegistration.gameId,\n      whatsapp: insertRegistration.whatsapp,\n      player2Name: insertRegistration.player2Name || null,\n      player2GameId: insertRegistration.player2GameId || null,\n      player3Name: insertRegistration.player3Name || null,\n      player3GameId: insertRegistration.player3GameId || null,\n      player4Name: insertRegistration.player4Name || null,\n      player4GameId: insertRegistration.player4GameId || null,\n      paymentScreenshot: insertRegistration.paymentScreenshot || null,\n      transactionId: insertRegistration.transactionId,\n      status: \"pending\",\n      paymentVerified: 0,\n      isFlagged: 0,\n    }).returning();\n    \n    // Increment tournament count after successful insertion\n    await this.incrementTournamentCount(\n      insertRegistration.gameType as GameType,\n      insertRegistration.tournamentType as TournamentType\n    );\n    \n    return result[0];\n  }\n\n  async getRegistration(id: string): Promise<Registration | undefined> {\n    const result = await db.select().from(registrations).where(eq(registrations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAllRegistrations(): Promise<Registration[]> {\n    return await db.select().from(registrations).orderBy(desc(registrations.submittedAt));\n  }\n\n  async getRegistrationsByGame(gameType: GameType, tournamentType: TournamentType): Promise<Registration[]> {\n    return await db.select().from(registrations)\n      .where(and(eq(registrations.gameType, gameType), eq(registrations.tournamentType, tournamentType)))\n      .orderBy(desc(registrations.submittedAt));\n  }\n\n  async getRegistrationsByStatus(status: string): Promise<Registration[]> {\n    return await db.select().from(registrations)\n      .where(eq(registrations.status, status))\n      .orderBy(desc(registrations.submittedAt));\n  }\n\n  async updateRegistrationStatus(id: string, status: \"pending\" | \"approved\" | \"rejected\", adminUsername?: string): Promise<Registration | undefined> {\n    const result = await db.update(registrations)\n      .set({ \n        status, \n        lastModifiedAt: new Date(),\n        lastModifiedBy: adminUsername || null,\n      })\n      .where(eq(registrations.id, id))\n      .returning();\n    \n    // Log activity\n    if (adminUsername && result[0]) {\n      await this.createActivityLog({\n        adminUsername,\n        action: status,\n        targetType: \"registration\",\n        targetId: id,\n        details: JSON.stringify({ playerName: result[0].playerName, teamName: result[0].teamName }),\n      });\n    }\n    \n    return result[0];\n  }\n\n  async updateRegistrationDetails(id: string, updates: Partial<Registration>, adminUsername?: string): Promise<Registration | undefined> {\n    const result = await db.update(registrations)\n      .set({ \n        ...updates,\n        lastModifiedAt: new Date(),\n        lastModifiedBy: adminUsername || null,\n      })\n      .where(eq(registrations.id, id))\n      .returning();\n    \n    // Log activity\n    if (adminUsername && result[0]) {\n      await this.createActivityLog({\n        adminUsername,\n        action: \"edit\",\n        targetType: \"registration\",\n        targetId: id,\n        details: JSON.stringify({ updates, playerName: result[0].playerName }),\n      });\n    }\n    \n    return result[0];\n  }\n\n  async updateRegistrationNotes(id: string, notes: string, adminUsername?: string): Promise<Registration | undefined> {\n    const result = await db.update(registrations)\n      .set({ \n        adminNotes: notes,\n        lastModifiedAt: new Date(),\n        lastModifiedBy: adminUsername || null,\n      })\n      .where(eq(registrations.id, id))\n      .returning();\n    \n    // Log activity\n    if (adminUsername && result[0]) {\n      await this.createActivityLog({\n        adminUsername,\n        action: \"add_note\",\n        targetType: \"registration\",\n        targetId: id,\n        details: JSON.stringify({ playerName: result[0].playerName }),\n      });\n    }\n    \n    return result[0];\n  }\n\n  async toggleRegistrationFlag(id: string, adminUsername?: string): Promise<Registration | undefined> {\n    const current = await this.getRegistration(id);\n    if (!current) {\n      return undefined;\n    }\n    \n    const newFlagValue = current.isFlagged === 1 ? 0 : 1;\n    const result = await db.update(registrations)\n      .set({ \n        isFlagged: newFlagValue,\n        lastModifiedAt: new Date(),\n        lastModifiedBy: adminUsername || null,\n      })\n      .where(eq(registrations.id, id))\n      .returning();\n    \n    // Log activity\n    if (adminUsername && result[0]) {\n      await this.createActivityLog({\n        adminUsername,\n        action: newFlagValue === 1 ? \"flag\" : \"unflag\",\n        targetType: \"registration\",\n        targetId: id,\n        details: JSON.stringify({ playerName: result[0].playerName }),\n      });\n    }\n    \n    return result[0];\n  }\n\n  async togglePaymentVerification(id: string, adminUsername?: string): Promise<Registration | undefined> {\n    const current = await this.getRegistration(id);\n    if (!current) {\n      return undefined;\n    }\n    \n    const newVerifiedValue = current.paymentVerified === 1 ? 0 : 1;\n    const result = await db.update(registrations)\n      .set({ \n        paymentVerified: newVerifiedValue,\n        lastModifiedAt: new Date(),\n        lastModifiedBy: adminUsername || null,\n      })\n      .where(eq(registrations.id, id))\n      .returning();\n    \n    // Log activity\n    if (adminUsername && result[0]) {\n      await this.createActivityLog({\n        adminUsername,\n        action: newVerifiedValue === 1 ? \"verify_payment\" : \"unverify_payment\",\n        targetType: \"registration\",\n        targetId: id,\n        details: JSON.stringify({ playerName: result[0].playerName }),\n      });\n    }\n    \n    return result[0];\n  }\n\n  async deleteRegistration(id: string): Promise<boolean> {\n    const registration = await this.getRegistration(id);\n    if (!registration) {\n      return false;\n    }\n    \n    // Decrement tournament count\n    await this.decrementTournamentCount(\n      registration.gameType as GameType,\n      registration.tournamentType as TournamentType\n    );\n    \n    await db.delete(registrations).where(eq(registrations.id, id));\n    return true;\n  }\n\n  async deleteRegistrationsByTournament(gameType: GameType, tournamentType: TournamentType): Promise<void> {\n    await db.delete(registrations)\n      .where(and(eq(registrations.gameType, gameType), eq(registrations.tournamentType, tournamentType)));\n  }\n\n  async searchRegistrations(query: string): Promise<Registration[]> {\n    const lowerQuery = `%${query.toLowerCase()}%`;\n    return await db.select().from(registrations)\n      .where(\n        or(\n          like(sql`LOWER(${registrations.playerName})`, lowerQuery),\n          like(sql`LOWER(${registrations.gameId})`, lowerQuery),\n          like(registrations.whatsapp, lowerQuery),\n          like(sql`LOWER(${registrations.transactionId})`, lowerQuery),\n          like(sql`LOWER(${registrations.teamName})`, lowerQuery),\n          like(sql`LOWER(${registrations.player2Name})`, lowerQuery),\n          like(sql`LOWER(${registrations.player3Name})`, lowerQuery),\n          like(sql`LOWER(${registrations.player4Name})`, lowerQuery),\n          like(sql`LOWER(${registrations.adminNotes})`, lowerQuery)\n        )\n      )\n      .orderBy(desc(registrations.submittedAt));\n  }\n\n  // Activity log operations\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const result = await db.insert(activityLogs).values({\n      adminUsername: insertLog.adminUsername,\n      action: insertLog.action,\n      targetType: insertLog.targetType,\n      targetId: insertLog.targetId,\n      details: insertLog.details || null,\n    }).returning();\n    return result[0];\n  }\n\n  async getAllActivityLogs(limit?: number): Promise<ActivityLog[]> {\n    const query = db.select().from(activityLogs).orderBy(desc(activityLogs.timestamp));\n    \n    if (limit) {\n      return await query.limit(limit);\n    }\n    return await query;\n  }\n\n  async getActivityLogsByTarget(targetType: string, targetId: string): Promise<ActivityLog[]> {\n    return await db.select().from(activityLogs)\n      .where(and(eq(activityLogs.targetType, targetType), eq(activityLogs.targetId, targetId)))\n      .orderBy(desc(activityLogs.timestamp));\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":17660},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/RegistrationForm.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { PatternFormat } from \"react-number-format\";\nimport { useDropzone } from \"react-dropzone\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Upload, Loader2, Check, Info, X, ImagePlus, AlertCircle } from \"lucide-react\";\nimport { type GameType, type TournamentType, TOURNAMENT_CONFIG } from \"@shared/schema\";\n\ninterface RegistrationFormProps {\n  gameType: GameType;\n  tournamentType: TournamentType;\n  qrCodeUrl?: string;\n  onSubmit: (data: any) => Promise<void>;\n  onSuccess?: () => void;\n  isSubmitting: boolean;\n}\n\nconst MAX_FILE_SIZE = 5 * 1024 * 1024;\n\nexport function RegistrationForm({ gameType, tournamentType, qrCodeUrl, onSubmit, onSuccess, isSubmitting }: RegistrationFormProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [screenshotPreview, setScreenshotPreview] = useState<string>(\"\");\n  const [fileName, setFileName] = useState<string>(\"\");\n  const [fileSize, setFileSize] = useState<number>(0);\n  const [fileError, setFileError] = useState<string>(\"\");\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const config = TOURNAMENT_CONFIG[gameType][tournamentType];\n  const formKey = `registration-form-${gameType}-${tournamentType}`;\n\n  const gameColor = gameType === \"bgmi\" ? \"text-bgmi\" : \"text-freefire\";\n  const gameBg = gameType === \"bgmi\" ? \"bg-bgmi\" : \"bg-freefire\";\n  const gameBgLight = gameType === \"bgmi\" ? \"bg-bgmi/10\" : \"bg-freefire/10\";\n  const gameBorder = gameType === \"bgmi\" ? \"border-bgmi\" : \"border-freefire\";\n  const gameBorderLight = gameType === \"bgmi\" ? \"border-bgmi/30\" : \"border-freefire/30\";\n\n  const formSchema = z.object({\n    teamName: tournamentType !== \"solo\" ? z.string().min(1, \"Team name is required\") : z.string().optional(),\n    playerName: z.string().min(1, \"Player name is required\"),\n    gameId: z.string().min(1, \"Game ID is required\"),\n    whatsapp: z.string().min(10, \"Valid WhatsApp number required\").max(13),\n    player2Name: config.maxPlayers >= 2 ? z.string().min(1, \"Player 2 name is required\") : z.string().optional(),\n    player2GameId: config.maxPlayers >= 2 ? z.string().min(1, \"Player 2 Game ID is required\") : z.string().optional(),\n    player3Name: config.maxPlayers >= 3 ? z.string().min(1, \"Player 3 name is required\") : z.string().optional(),\n    player3GameId: config.maxPlayers >= 3 ? z.string().min(1, \"Player 3 Game ID is required\") : z.string().optional(),\n    player4Name: config.maxPlayers >= 4 ? z.string().min(1, \"Player 4 name is required\") : z.string().optional(),\n    player4GameId: config.maxPlayers >= 4 ? z.string().min(1, \"Player 4 Game ID is required\") : z.string().optional(),\n    paymentScreenshot: z.string().optional(),\n    transactionId: z.string().min(1, \"Transaction ID is required\"),\n  });\n\n  type FormData = z.infer<typeof formSchema>;\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    mode: \"onChange\",\n    defaultValues: {\n      teamName: \"\",\n      playerName: \"\",\n      gameId: \"\",\n      whatsapp: \"\",\n      player2Name: \"\",\n      player2GameId: \"\",\n      player3Name: \"\",\n      player3GameId: \"\",\n      player4Name: \"\",\n      player4GameId: \"\",\n      paymentScreenshot: \"\",\n      transactionId: \"\",\n    },\n  });\n\n  useEffect(() => {\n    const savedData = localStorage.getItem(formKey);\n    if (savedData) {\n      try {\n        const parsedData = JSON.parse(savedData);\n        Object.keys(parsedData).forEach((key) => {\n          form.setValue(key as keyof FormData, parsedData[key]);\n        });\n        if (parsedData.paymentScreenshot) {\n          setScreenshotPreview(parsedData.paymentScreenshot);\n        }\n        if (parsedData.fileName) {\n          setFileName(parsedData.fileName);\n        }\n        if (parsedData.fileSize) {\n          setFileSize(parsedData.fileSize);\n        }\n      } catch (error) {\n        console.error(\"Error loading saved form data:\", error);\n      }\n    }\n  }, [formKey, form]);\n\n  useEffect(() => {\n    const subscription = form.watch((value) => {\n      const dataToSave = {\n        ...value,\n        fileName,\n        fileSize,\n      };\n      localStorage.setItem(formKey, JSON.stringify(dataToSave));\n      setHasUnsavedChanges(true);\n    });\n    return () => subscription.unsubscribe();\n  }, [form, formKey, fileName, fileSize]);\n\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (hasUnsavedChanges && !isSubmitting) {\n        e.preventDefault();\n        e.returnValue = \"\";\n      }\n    };\n\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n  }, [hasUnsavedChanges, isSubmitting]);\n\n  const compressImage = async (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement(\"canvas\");\n          let width = img.width;\n          let height = img.height;\n\n          // Reduced max dimension for faster compression\n          const maxDimension = 800;\n          if (width > height && width > maxDimension) {\n            height = (height * maxDimension) / width;\n            width = maxDimension;\n          } else if (height > maxDimension) {\n            width = (width * maxDimension) / height;\n            height = maxDimension;\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n\n          const ctx = canvas.getContext(\"2d\");\n          if (ctx) {\n            ctx.drawImage(img, 0, 0, width, height);\n            \n            // More aggressive compression for better performance\n            let quality = 0.6;\n            if (file.size > 2 * 1024 * 1024) quality = 0.4;\n            if (file.size > 4 * 1024 * 1024) quality = 0.2;\n\n            const compressedBase64 = canvas.toDataURL(\"image/jpeg\", quality);\n            resolve(compressedBase64);\n          } else {\n            reject(new Error(\"Could not get canvas context\"));\n          }\n        };\n        img.onerror = () => reject(new Error(\"Failed to load image\"));\n        img.src = e.target?.result as string;\n      };\n      reader.onerror = () => reject(new Error(\"Failed to read file\"));\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const processFile = async (file: File) => {\n    setFileError(\"\");\n    \n    if (file.size > MAX_FILE_SIZE) {\n      setFileError(`File size exceeds 5MB. Please upload a smaller image.`);\n      setFileName(\"\");\n      setFileSize(0);\n      setScreenshotPreview(\"\");\n      form.setValue(\"paymentScreenshot\", \"\");\n      return;\n    }\n\n    setFileName(file.name);\n    setFileSize(file.size);\n\n    try {\n      const base64 = file.size > 1024 * 1024 ? await compressImage(file) : await new Promise<string>((resolve) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.readAsDataURL(file);\n      });\n\n      setScreenshotPreview(base64);\n      form.setValue(\"paymentScreenshot\", base64);\n    } catch (error) {\n      setFileError(\"Failed to process image. Please try another file.\");\n      console.error(\"Error processing image:\", error);\n    }\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (acceptedFiles.length > 0) {\n      await processFile(acceptedFiles[0]);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp']\n    },\n    maxFiles: 1,\n    multiple: false,\n  });\n\n  const removeFile = () => {\n    setScreenshotPreview(\"\");\n    setFileName(\"\");\n    setFileSize(0);\n    setFileError(\"\");\n    form.setValue(\"paymentScreenshot\", \"\");\n  };\n\n  const clearAllFormData = () => {\n    // Clear all tournament form data from localStorage\n    const formKeys = [\n      'registration-form-bgmi-solo',\n      'registration-form-bgmi-duo',\n      'registration-form-bgmi-squad',\n      'registration-form-freefire-solo',\n      'registration-form-freefire-duo',\n      'registration-form-freefire-squad',\n    ];\n    \n    formKeys.forEach(key => localStorage.removeItem(key));\n  };\n\n  const handleSubmit = async (data: FormData) => {\n    let timeoutId: NodeJS.Timeout | null = null;\n    \n    try {\n      setCurrentStep(3);\n      \n      // Add timeout for submission to prevent infinite loading\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        timeoutId = setTimeout(() => reject(new Error(\"Submission timeout\")), 30000);\n      });\n      \n      await Promise.race([\n        onSubmit({\n          ...data,\n          gameType,\n          tournamentType,\n          status: \"pending\",\n        }),\n        timeoutPromise\n      ]);\n      \n      // Clear timeout on successful submission\n      if (timeoutId) clearTimeout(timeoutId);\n      \n      // Reset form state after successful submission\n      form.reset();\n      setScreenshotPreview(\"\");\n      setFileName(\"\");\n      setFileSize(0);\n      setFileError(\"\");\n      setCurrentStep(1);\n      setHasUnsavedChanges(false);\n      \n      // Clear ALL tournament form data from localStorage after successful submission\n      clearAllFormData();\n      \n      // Call onSuccess callback if provided\n      if (onSuccess) {\n        onSuccess();\n      }\n    } catch (error) {\n      // Clear timeout on error\n      if (timeoutId) clearTimeout(timeoutId);\n      \n      // On error, go back to step 2 so user can retry\n      setCurrentStep(2);\n      console.error(\"Submission error:\", error);\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  const isFieldValid = (fieldName: keyof FormData): boolean => {\n    const value = form.watch(fieldName);\n    const error = form.formState.errors[fieldName];\n    return !!value && !error && value.toString().length > 0;\n  };\n\n  const canProceedToStep2 = (): boolean => {\n    const requiredFields: (keyof FormData)[] = [\"playerName\", \"gameId\", \"whatsapp\"];\n    \n    if (tournamentType !== \"solo\") {\n      requiredFields.push(\"teamName\");\n    }\n    \n    if (config.maxPlayers >= 2) {\n      requiredFields.push(\"player2Name\", \"player2GameId\");\n    }\n    \n    if (config.maxPlayers >= 3) {\n      requiredFields.push(\"player3Name\", \"player3GameId\");\n    }\n    \n    if (config.maxPlayers >= 4) {\n      requiredFields.push(\"player4Name\", \"player4GameId\");\n    }\n    \n    return requiredFields.every(fieldName => isFieldValid(fieldName));\n  };\n\n  const canProceedToStep3 = (): boolean => {\n    return isFieldValid(\"transactionId\");\n  };\n\n  const steps = [\n    { number: 1, title: \"Team/Player Details\", completed: currentStep > 1 },\n    { number: 2, title: \"Payment Details\", completed: currentStep > 2 },\n    { number: 3, title: \"Review & Submit\", completed: currentStep > 3 },\n  ];\n\n  const progressPercentage = ((currentStep - 1) / (steps.length - 1)) * 100;\n\n  const fieldVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: (i: number) => ({\n      opacity: 1,\n      y: 0,\n      transition: {\n        delay: i * 0.1,\n        duration: 0.4,\n        ease: \"easeOut\"\n      }\n    })\n  };\n\n  const checkmarkVariants = {\n    hidden: { scale: 0, rotate: -180 },\n    visible: { \n      scale: 1, \n      rotate: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 260,\n        damping: 20\n      }\n    }\n  };\n\n  return (\n    <Card className={`${gameBorder} border-t-4`}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Registration Form</CardTitle>\n        <CardDescription className=\"text-base\">Fill in all details carefully to complete your registration</CardDescription>\n        \n        <div className=\"mt-6 space-y-5\" data-testid=\"progress-indicator\">\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.number} className=\"flex items-center flex-1\">\n                <div className=\"flex flex-col items-center flex-1\">\n                  <motion.div\n                    className={`w-12 h-12 rounded-full flex items-center justify-center border-2 transition-all ${\n                      currentStep >= step.number\n                        ? `${gameBg} ${gameBorder} text-white`\n                        : \"bg-background border-border text-muted-foreground\"\n                    } ${step.completed ? `${gameBg} ${gameBorder}` : \"\"}`}\n                    data-testid={`step-indicator-${step.number}`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <AnimatePresence mode=\"wait\">\n                      {step.completed ? (\n                        <motion.div\n                          key=\"check\"\n                          variants={checkmarkVariants}\n                          initial=\"hidden\"\n                          animate=\"visible\"\n                          exit=\"hidden\"\n                        >\n                          <Check className=\"w-6 h-6 text-white\" />\n                        </motion.div>\n                      ) : (\n                        <motion.span\n                          key=\"number\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          exit={{ opacity: 0 }}\n                          className=\"text-base font-bold\"\n                        >\n                          {step.number}\n                        </motion.span>\n                      )}\n                    </AnimatePresence>\n                  </motion.div>\n                  <span className={`text-xs mt-2 text-center font-medium ${currentStep >= step.number ? \"text-foreground\" : \"text-muted-foreground\"}`}>\n                    {step.title}\n                  </span>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className=\"flex-1 h-1 mx-3 bg-border rounded-full relative\" style={{ top: \"-20px\" }}>\n                    <motion.div\n                      className={`h-full ${gameBg} rounded-full`}\n                      initial={{ width: \"0%\" }}\n                      animate={{ width: currentStep > step.number ? \"100%\" : \"0%\" }}\n                      transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                    />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"relative\">\n            <Progress value={progressPercentage} className=\"h-2\" data-testid=\"progress-bar\" />\n            <motion.div\n              className={`absolute top-0 left-0 h-full ${gameBg} rounded-full`}\n              initial={{ width: \"0%\" }}\n              animate={{ width: `${progressPercentage}%` }}\n              transition={{ duration: 0.5, ease: \"easeInOut\" }}\n              style={{ zIndex: 10 }}\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-8\">\n            <AnimatePresence mode=\"wait\">\n              {currentStep === 1 && (\n                <motion.div\n                  key=\"step1\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"space-y-6\"\n                  data-testid=\"step-team-player-details\"\n                >\n                  {tournamentType !== \"solo\" && (\n                    <motion.div custom={0} variants={fieldVariants} initial=\"hidden\" animate=\"visible\">\n                      <FormField\n                        control={form.control}\n                        name=\"teamName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base\">\n                              Team Name\n                              <span className=\"text-destructive\">*</span>\n                              <AnimatePresence>\n                                {isFieldValid(\"teamName\") && (\n                                  <motion.div\n                                    variants={checkmarkVariants}\n                                    initial=\"hidden\"\n                                    animate=\"visible\"\n                                    exit=\"hidden\"\n                                  >\n                                    <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-team-name\" />\n                                  </motion.div>\n                                )}\n                              </AnimatePresence>\n                            </FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter your team name\" className=\"h-11\" data-testid=\"input-team-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </motion.div>\n                  )}\n\n                  <motion.div \n                    custom={tournamentType !== \"solo\" ? 1 : 0} \n                    variants={fieldVariants} \n                    initial=\"hidden\" \n                    animate=\"visible\"\n                    className={`space-y-5 p-6 rounded-lg ${gameBgLight} border-2 ${gameBorderLight}`}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={`${gameBg} text-white`}>\n                        Player 1 {tournamentType !== \"solo\" && \"(Team Leader)\"}\n                      </Badge>\n                    </div>\n                    <div className=\"grid md:grid-cols-2 gap-5\">\n                      <FormField\n                        control={form.control}\n                        name=\"playerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base\">\n                              Player Name\n                              <span className=\"text-destructive\">*</span>\n                              <AnimatePresence>\n                                {isFieldValid(\"playerName\") && (\n                                  <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                    <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player-name\" />\n                                  </motion.div>\n                                )}\n                              </AnimatePresence>\n                            </FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter name\" className=\"h-11\" data-testid=\"input-player1-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"gameId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base\">\n                              Game ID\n                              <span className=\"text-destructive\">*</span>\n                              <AnimatePresence>\n                                {isFieldValid(\"gameId\") && (\n                                  <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                    <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-game-id\" />\n                                  </motion.div>\n                                )}\n                              </AnimatePresence>\n                            </FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter game ID\" className=\"h-11\" data-testid=\"input-player1-gameid\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2 text-base\">\n                        WhatsApp Number\n                        <span className=\"text-destructive\">*</span>\n                        <AnimatePresence>\n                          {isFieldValid(\"whatsapp\") && (\n                            <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                              <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-whatsapp\" />\n                            </motion.div>\n                          )}\n                        </AnimatePresence>\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Info className=\"w-4 h-4 text-muted-foreground cursor-help\" data-testid=\"info-whatsapp\" />\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>We'll send match details and updates here</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </FormLabel>\n                      <Controller\n                        control={form.control}\n                        name=\"whatsapp\"\n                        render={({ field }) => (\n                          <PatternFormat\n                            value={field.value}\n                            format=\"+91 ##### #####\"\n                            mask=\"_\"\n                            placeholder=\"+91 XXXXX XXXXX\"\n                            customInput={Input}\n                            className=\"h-11\"\n                            data-testid=\"input-whatsapp\"\n                            onValueChange={(values) => {\n                              field.onChange(values.value);\n                            }}\n                          />\n                        )}\n                      />\n                      <FormDescription>We'll send match details here</FormDescription>\n                      {form.formState.errors.whatsapp && (\n                        <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.whatsapp.message}</p>\n                      )}\n                    </FormItem>\n                  </motion.div>\n\n                  {config.maxPlayers >= 2 && (\n                    <motion.div \n                      custom={tournamentType !== \"solo\" ? 2 : 1} \n                      variants={fieldVariants} \n                      initial=\"hidden\" \n                      animate=\"visible\"\n                      className={`space-y-5 p-6 rounded-lg ${gameBgLight} border-2 ${gameBorderLight}`}\n                    >\n                      <Badge className={`${gameBg} text-white`}>Player 2</Badge>\n                      <div className=\"grid md:grid-cols-2 gap-5\">\n                        <FormField\n                          control={form.control}\n                          name=\"player2Name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Player Name\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player2Name\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player2-name\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter name\" className=\"h-11\" data-testid=\"input-player2-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"player2GameId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Game ID\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player2GameId\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player2-gameid\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter game ID\" className=\"h-11\" data-testid=\"input-player2-gameid\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n\n                  {config.maxPlayers >= 3 && (\n                    <motion.div \n                      custom={tournamentType !== \"solo\" ? 3 : 2} \n                      variants={fieldVariants} \n                      initial=\"hidden\" \n                      animate=\"visible\"\n                      className={`space-y-5 p-6 rounded-lg ${gameBgLight} border-2 ${gameBorderLight}`}\n                    >\n                      <Badge className={`${gameBg} text-white`}>Player 3</Badge>\n                      <div className=\"grid md:grid-cols-2 gap-5\">\n                        <FormField\n                          control={form.control}\n                          name=\"player3Name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Player Name\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player3Name\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player3-name\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter name\" className=\"h-11\" data-testid=\"input-player3-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"player3GameId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Game ID\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player3GameId\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player3-gameid\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter game ID\" className=\"h-11\" data-testid=\"input-player3-gameid\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n\n                  {config.maxPlayers >= 4 && (\n                    <motion.div \n                      custom={tournamentType !== \"solo\" ? 4 : 3} \n                      variants={fieldVariants} \n                      initial=\"hidden\" \n                      animate=\"visible\"\n                      className={`space-y-5 p-6 rounded-lg ${gameBgLight} border-2 ${gameBorderLight}`}\n                    >\n                      <Badge className={`${gameBg} text-white`}>Player 4</Badge>\n                      <div className=\"grid md:grid-cols-2 gap-5\">\n                        <FormField\n                          control={form.control}\n                          name=\"player4Name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Player Name\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player4Name\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player4-name\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter name\" className=\"h-11\" data-testid=\"input-player4-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"player4GameId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2 text-base\">\n                                Game ID\n                                <span className=\"text-destructive\">*</span>\n                                <AnimatePresence>\n                                  {isFieldValid(\"player4GameId\") && (\n                                    <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                      <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-player4-gameid\" />\n                                    </motion.div>\n                                  )}\n                                </AnimatePresence>\n                              </FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Enter game ID\" className=\"h-11\" data-testid=\"input-player4-gameid\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n\n                  <div className=\"space-y-3\">\n                    <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                      <Button\n                        type=\"button\"\n                        className={`w-full h-12 text-base font-semibold ${gameBg} hover:opacity-90`}\n                        size=\"lg\"\n                        onClick={() => setCurrentStep(2)}\n                        disabled={!canProceedToStep2()}\n                        data-testid=\"button-next-step\"\n                      >\n                        Continue to Payment\n                      </Button>\n                    </motion.div>\n                    {!canProceedToStep2() && (\n                      <motion.div\n                        initial={{ opacity: 0, y: -10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className={`text-sm ${gameColor} text-center p-3 rounded-md ${gameBgLight} border ${gameBorderLight}`}\n                      >\n                        <AlertCircle className=\"w-4 h-4 inline mr-2\" />\n                        Please fill in all required fields to continue\n                      </motion.div>\n                    )}\n                  </div>\n                </motion.div>\n              )}\n\n              {currentStep === 2 && (\n                <motion.div\n                  key=\"step2\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"space-y-6\"\n                  data-testid=\"step-payment-details\"\n                >\n                  <motion.div \n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.1 }}\n                    className={`space-y-5 p-6 rounded-lg ${gameBgLight} border-2 ${gameBorder}`}\n                  >\n                    <h3 className=\"text-xl font-bold flex items-center gap-2\">\n                      <div className={`w-1 h-6 ${gameBg} rounded-full`} />\n                      Payment Details\n                    </h3>\n                    <div className=\"space-y-5\">\n                      <div className={`flex items-center justify-between p-5 rounded-lg bg-background border-2 ${gameBorderLight}`} data-testid=\"text-entry-fee-display\">\n                        <span className=\"text-base font-semibold\">Entry Fee</span>\n                        <span className={`text-3xl font-bold ${gameColor}`}>₹{config.entryFee}</span>\n                      </div>\n\n                      {qrCodeUrl && (\n                        <motion.div \n                          initial={{ opacity: 0, scale: 0.9 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ delay: 0.2 }}\n                          className=\"text-center space-y-3\"\n                        >\n                          <Label className=\"text-base font-semibold\">Scan QR Code to Pay</Label>\n                          <div className={`inline-block p-5 rounded-lg bg-white border-2 ${gameBorderLight}`}>\n                            <img src={qrCodeUrl} alt=\"Payment QR Code\" className=\"w-52 h-52 mx-auto\" data-testid=\"img-payment-qr\" />\n                          </div>\n                        </motion.div>\n                      )}\n\n                      <FormField\n                        control={form.control}\n                        name=\"paymentScreenshot\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base\">\n                              Payment Screenshot\n                              <span className=\"text-muted-foreground text-sm\">(Optional)</span>\n                              <AnimatePresence>\n                                {screenshotPreview && (\n                                  <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                    <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-screenshot\" />\n                                  </motion.div>\n                                )}\n                              </AnimatePresence>\n                            </FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-3\">\n                                {fileError && (\n                                  <motion.div\n                                    initial={{ opacity: 0, y: -10 }}\n                                    animate={{ opacity: 1, y: 0 }}\n                                  >\n                                    <Alert variant=\"destructive\" data-testid=\"alert-file-error\">\n                                      <AlertCircle className=\"h-4 w-4\" />\n                                      <AlertDescription>{fileError}</AlertDescription>\n                                    </Alert>\n                                  </motion.div>\n                                )}\n                                \n                                {!screenshotPreview ? (\n                                  <motion.div\n                                    whileHover={{ scale: 1.01 }}\n                                    whileTap={{ scale: 0.99 }}\n                                  >\n                                    <div\n                                      {...getRootProps()}\n                                      className={`flex flex-col items-center justify-center w-full min-h-48 border-3 border-dashed rounded-lg cursor-pointer transition-all ${\n                                        isDragActive\n                                          ? `${gameBorder} ${gameBgLight} border-solid`\n                                          : `border-border hover-elevate active-elevate-2 bg-muted/20`\n                                      }`}\n                                    >\n                                      <input {...getInputProps()} data-testid=\"input-payment-screenshot\" />\n                                      <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n                                        <motion.div\n                                          animate={isDragActive ? { scale: [1, 1.1, 1], rotate: [0, 5, -5, 0] } : {}}\n                                          transition={{ duration: 0.5, repeat: isDragActive ? Infinity : 0 }}\n                                        >\n                                          <Upload className={`w-12 h-12 mb-4 ${isDragActive ? gameColor : 'text-muted-foreground'}`} />\n                                        </motion.div>\n                                        <p className={`text-base font-semibold mb-2 ${isDragActive ? gameColor : 'text-foreground'}`}>\n                                          {isDragActive ? \"Drop your screenshot here\" : \"Drag & drop your payment screenshot here\"}\n                                        </p>\n                                        <p className=\"text-sm text-muted-foreground mb-1\">or click to browse</p>\n                                        <p className=\"text-xs text-muted-foreground mt-2\">Supported formats: PNG, JPG, JPEG, GIF, WEBP</p>\n                                        <p className=\"text-xs text-muted-foreground\">Max size: 5MB</p>\n                                      </div>\n                                    </div>\n                                  </motion.div>\n                                ) : (\n                                  <motion.div\n                                    initial={{ opacity: 0, scale: 0.9 }}\n                                    animate={{ opacity: 1, scale: 1 }}\n                                    className=\"space-y-4\"\n                                  >\n                                    <div className={`relative rounded-lg border-2 ${gameBorderLight} p-4 ${gameBgLight}`}>\n                                      <img src={screenshotPreview} alt=\"Preview\" className=\"w-full h-48 object-contain rounded\" />\n                                    </div>\n                                    <div className=\"flex items-center justify-between p-4 rounded-lg bg-background border border-border\">\n                                      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                                        <ImagePlus className={`w-5 h-5 ${gameColor} flex-shrink-0`} />\n                                        <div className=\"flex-1 min-w-0\">\n                                          <p className=\"text-sm font-semibold truncate\" data-testid=\"text-file-name\">{fileName}</p>\n                                          <p className=\"text-xs text-muted-foreground\" data-testid=\"text-file-size\">{formatFileSize(fileSize)}</p>\n                                        </div>\n                                      </div>\n                                      <div className=\"flex gap-2 ml-3\">\n                                        <div {...getRootProps()}>\n                                          <input {...getInputProps()} />\n                                          <Button\n                                            type=\"button\"\n                                            variant=\"outline\"\n                                            size=\"sm\"\n                                            className=\"h-9\"\n                                            data-testid=\"button-change-image\"\n                                          >\n                                            Change\n                                          </Button>\n                                        </div>\n                                        <Button\n                                          type=\"button\"\n                                          variant=\"outline\"\n                                          size=\"sm\"\n                                          className=\"h-9\"\n                                          onClick={removeFile}\n                                          data-testid=\"button-remove-image\"\n                                        >\n                                          <X className=\"w-4 h-4\" />\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  </motion.div>\n                                )}\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"transactionId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base\">\n                              Transaction ID / UTR Number\n                              <span className=\"text-destructive\">*</span>\n                              <AnimatePresence>\n                                {isFieldValid(\"transactionId\") && (\n                                  <motion.div variants={checkmarkVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n                                    <Check className={`w-4 h-4 ${gameColor}`} data-testid=\"check-transaction-id\" />\n                                  </motion.div>\n                                )}\n                              </AnimatePresence>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <Info className=\"w-4 h-4 text-muted-foreground cursor-help\" data-testid=\"info-transaction-id\" />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p>Found in your payment app after completing payment</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Enter transaction ID\" className=\"font-mono h-11\" data-testid=\"input-transaction-id\" />\n                            </FormControl>\n                            <FormDescription>Found in your payment app after completing payment</FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </motion.div>\n\n                  <div className=\"flex gap-4\">\n                    <motion.div className=\"flex-1\" whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"w-full h-12 text-base font-semibold\"\n                        size=\"lg\"\n                        onClick={() => setCurrentStep(1)}\n                        data-testid=\"button-back-step\"\n                      >\n                        Back\n                      </Button>\n                    </motion.div>\n                    <motion.div className=\"flex-1\" whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                      <Button\n                        type=\"submit\"\n                        className={`w-full h-12 text-base font-semibold ${gameBg} hover:opacity-90`}\n                        size=\"lg\"\n                        disabled={isSubmitting || !canProceedToStep3()}\n                        data-testid=\"button-submit-registration\"\n                      >\n                        <AnimatePresence mode=\"wait\">\n                          {isSubmitting ? (\n                            <motion.div\n                              key=\"loading\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              exit={{ opacity: 0 }}\n                              className=\"flex items-center\"\n                            >\n                              <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                              Submitting...\n                            </motion.div>\n                          ) : (\n                            <motion.span\n                              key=\"submit\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              exit={{ opacity: 0 }}\n                            >\n                              Complete Registration\n                            </motion.span>\n                          )}\n                        </AnimatePresence>\n                      </Button>\n                    </motion.div>\n                  </div>\n                  {!canProceedToStep3() && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className={`text-sm ${gameColor} text-center p-3 rounded-md ${gameBgLight} border ${gameBorderLight}`}\n                    >\n                      <AlertCircle className=\"w-4 h-4 inline mr-2\" />\n                      Please enter your transaction ID to proceed\n                    </motion.div>\n                  )}\n                </motion.div>\n              )}\n\n              {currentStep === 3 && (\n                <motion.div\n                  key=\"step3\"\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"text-center space-y-6 py-12\"\n                  data-testid=\"step-review-submit\"\n                >\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                  >\n                    <Loader2 className={`w-16 h-16 mx-auto ${gameColor}`} />\n                  </motion.div>\n                  <h3 className=\"text-2xl font-bold\">Processing Your Registration...</h3>\n                  <p className=\"text-muted-foreground text-base\">Please wait while we submit your registration</p>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":50034},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Label } from \"@/components/ui/label\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Shield, LogOut, Check, X, ExternalLink, RefreshCw, Users, Trophy, Download, BarChart3, \n  CheckCircle2, Clock, XCircle, QrCode, Upload, DollarSign, TrendingUp, Printer, \n  CheckCircle, Image as ImageIcon, Copy, Search, Flag, Edit, Trash2, FileText,\n  MessageSquare, PhoneCall, Gamepad2, Filter, Calendar, AlertTriangle, BadgeCheck,\n  Activity, StickyNote, Eye, MoreVertical, ArrowUpDown, FileSpreadsheet, UserCheck\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { type Registration, type Tournament, type ActivityLog, TOURNAMENT_CONFIG } from \"@shared/schema\";\nimport { formatDistanceToNow, format, startOfDay, subDays, isAfter, isBefore, parseISO } from \"date-fns\";\nimport * as XLSX from \"xlsx\";\nimport copy from \"copy-to-clipboard\";\nimport Lightbox from \"yet-another-react-lightbox\";\nimport \"yet-another-react-lightbox/styles.css\";\nimport CountUp from \"react-countup\";\nimport { motion } from \"framer-motion\";\nimport { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuLabel } from \"@/components/ui/dropdown-menu\";\n\nconst ITEMS_PER_PAGE = 10;\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [selectedGame, setSelectedGame] = useState<\"bgmi\" | \"freefire\">(\"bgmi\");\n  const [activeMode, setActiveMode] = useState<\"solo\" | \"duo\" | \"squad\">(\"solo\");\n  const [statusFilter, setStatusFilter] = useState<\"all\" | \"pending\" | \"approved\" | \"rejected\">(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState<\"all\" | \"today\" | \"week\" | \"month\">(\"all\");\n  const [flagFilter, setFlagFilter] = useState<\"all\" | \"flagged\" | \"unflagged\">(\"all\");\n  const [paymentFilter, setPaymentFilter] = useState<\"all\" | \"verified\" | \"unverified\">(\"all\");\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [qrDialogOpen, setQrDialogOpen] = useState(false);\n  const [qrImagePreview, setQrImagePreview] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [approveAllDialogOpen, setApproveAllDialogOpen] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedRegistrations, setSelectedRegistrations] = useState<Set<string>>(new Set());\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [lightboxImage, setLightboxImage] = useState<string>(\"\");\n  const [notesDialogOpen, setNotesDialogOpen] = useState(false);\n  const [currentNotes, setCurrentNotes] = useState(\"\");\n  const [currentNotesId, setCurrentNotesId] = useState(\"\");\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingRegistration, setEditingRegistration] = useState<Registration | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [deletingId, setDeletingId] = useState(\"\");\n  const [activityLogDialogOpen, setActivityLogDialogOpen] = useState(false);\n  const [activityTarget, setActivityTarget] = useState<{type: string, id: string}>({type: \"\", id: \"\"});\n  const [bulkDeleteDialogOpen, setBulkDeleteDialogOpen] = useState(false);\n  const [showAdvancedStats, setShowAdvancedStats] = useState(false);\n  \n  const { toast } = useToast();\n\n  const { data: authStatus, isLoading: authLoading } = useQuery<{ authenticated: boolean }>({\n    queryKey: [\"/api/admin/check\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!authLoading && !authStatus?.authenticated) {\n      setLocation(\"/admin/login\");\n    }\n  }, [authLoading, authStatus, setLocation]);\n\n  const { data: allRegistrations, isLoading } = useQuery<Registration[]>({\n    queryKey: [\"/api/registrations\"],\n    refetchInterval: 5000,\n    enabled: !!authStatus?.authenticated,\n    retry: (failureCount, error: any) => {\n      if (error?.message?.includes(\"Unauthorized\") || error?.message?.includes(\"401\")) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  const { data: currentTournament } = useQuery<Tournament>({\n    queryKey: [\"/api/tournaments\", selectedGame, activeMode],\n    enabled: !!authStatus?.authenticated,\n  });\n\n  const { data: activityLogs } = useQuery<ActivityLog[]>({\n    queryKey: [\"/api/activity-logs\"],\n    enabled: !!authStatus?.authenticated && activityLogDialogOpen,\n  });\n\n  const { data: targetActivityLogs, isError: targetLogsError } = useQuery<ActivityLog[]>({\n    queryKey: [`/api/activity-logs/${activityTarget.type}/${activityTarget.id}`],\n    enabled: !!authStatus?.authenticated && !!activityTarget.type && !!activityTarget.id,\n    retry: false,\n  });\n\n  // Reset page when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [selectedGame, activeMode, statusFilter, searchQuery, dateFilter, flagFilter, paymentFilter]);\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/registrations/${id}`, { status });\n      return await res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      toast({\n        title: variables.status === \"approved\" ? \"Registration Approved\" : \"Registration Rejected\",\n        description: variables.status === \"approved\" ? \"Player has been notified.\" : \"Player has been notified.\",\n        variant: variables.status === \"rejected\" ? \"destructive\" : \"default\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update registration status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const flagMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/registrations/${id}/flag`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      toast({\n        title: \"Flag Toggled\",\n        description: \"Registration flag status updated.\",\n      });\n    },\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/registrations/${id}/verify-payment`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      toast({\n        title: \"Payment Verification Toggled\",\n        description: \"Payment verification status updated.\",\n      });\n    },\n  });\n\n  const notesMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/registrations/${id}/notes`, { notes });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setNotesDialogOpen(false);\n      toast({\n        title: \"Notes Updated\",\n        description: \"Admin notes have been saved.\",\n      });\n    },\n  });\n\n  const editMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Registration> }) => {\n      const res = await apiRequest(\"PUT\", `/api/registrations/${id}/details`, updates);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setEditDialogOpen(false);\n      setEditingRegistration(null);\n      toast({\n        title: \"Registration Updated\",\n        description: \"Registration details have been updated.\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/registrations/${id}`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setDeleteDialogOpen(false);\n      toast({\n        title: \"Registration Deleted\",\n        description: \"Registration has been permanently deleted.\",\n      });\n    },\n  });\n\n  const bulkApproveMutation = useMutation({\n    mutationFn: async (ids: string[]) => {\n      const res = await apiRequest(\"POST\", \"/api/registrations/bulk/approve\", { ids });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setSelectedRegistrations(new Set());\n      toast({\n        title: \"Bulk Approve Successful\",\n        description: `Approved ${data.count} registrations.`,\n      });\n    },\n  });\n\n  const bulkRejectMutation = useMutation({\n    mutationFn: async (ids: string[]) => {\n      const res = await apiRequest(\"POST\", \"/api/registrations/bulk/reject\", { ids });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setSelectedRegistrations(new Set());\n      toast({\n        title: \"Bulk Reject Successful\",\n        description: `Rejected ${data.count} registrations.`,\n      });\n    },\n  });\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (ids: string[]) => {\n      const res = await apiRequest(\"POST\", \"/api/registrations/bulk/delete\", { ids });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      setSelectedRegistrations(new Set());\n      setBulkDeleteDialogOpen(false);\n      toast({\n        title: \"Bulk Delete Successful\",\n        description: `Deleted ${data.count} registrations.`,\n      });\n    },\n  });\n\n  const approveAllMutation = useMutation({\n    mutationFn: async () => {\n      const pendingRegistrations = filteredRegistrations.filter(r => r.status === \"pending\");\n      const res = await apiRequest(\"POST\", \"/api/registrations/bulk/approve\", { \n        ids: pendingRegistrations.map(r => r.id) \n      });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      toast({\n        title: \"All Pending Approved\",\n        description: `Successfully approved ${data.count} registrations.`,\n      });\n      setApproveAllDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve all registrations.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetTournamentMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/tournaments/reset\", {\n        gameType: selectedGame,\n        tournamentType: activeMode,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/registrations\"] });\n      queryClient.invalidateQueries({ \n        predicate: (query) => {\n          const key = query.queryKey[0];\n          return typeof key === \"string\" && key.startsWith(\"/api/activity-logs\");\n        }\n      });\n      toast({\n        title: \"Tournament Reset\",\n        description: \"All registrations for this mode have been cleared.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reset tournament.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/admin/logout\");\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/check\"] });\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been logged out successfully.\",\n      });\n      setLocation(\"/admin/login\");\n    },\n  });\n\n  const updateQRMutation = useMutation({\n    mutationFn: async ({ qrCodeUrl }: { qrCodeUrl: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/tournaments/${selectedGame}/${activeMode}/qr`, {\n        qrCodeUrl,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tournaments\"] });\n      toast({\n        title: \"QR Code Updated\",\n        description: \"Payment QR code has been updated successfully.\",\n      });\n      setQrDialogOpen(false);\n      setQrImagePreview(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update QR code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleApprove = (id: string) => {\n    updateStatusMutation.mutate({ id, status: \"approved\" });\n  };\n\n  const handleReject = (id: string) => {\n    updateStatusMutation.mutate({ id, status: \"rejected\" });\n  };\n\n  const handleReset = () => {\n    resetTournamentMutation.mutate();\n  };\n\n  const handleApproveAll = () => {\n    approveAllMutation.mutate();\n  };\n\n  const handleFlag = (id: string) => {\n    flagMutation.mutate(id);\n  };\n\n  const handleVerifyPayment = (id: string) => {\n    verifyPaymentMutation.mutate(id);\n  };\n\n  const handleOpenNotes = (registration: Registration) => {\n    setCurrentNotesId(registration.id);\n    setCurrentNotes(registration.adminNotes || \"\");\n    setNotesDialogOpen(true);\n  };\n\n  const handleSaveNotes = () => {\n    notesMutation.mutate({ id: currentNotesId, notes: currentNotes });\n  };\n\n  const handleOpenEdit = (registration: Registration) => {\n    setEditingRegistration(registration);\n    setEditDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingRegistration) return;\n    \n    const { id, submittedAt, lastModifiedAt, lastModifiedBy, ...updates } = editingRegistration;\n    editMutation.mutate({ id, updates });\n  };\n\n  const handleOpenDelete = (id: string) => {\n    setDeletingId(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleConfirmDelete = () => {\n    deleteMutation.mutate(deletingId);\n  };\n\n  const handleBulkApprove = () => {\n    const ids = Array.from(selectedRegistrations);\n    bulkApproveMutation.mutate(ids);\n  };\n\n  const handleBulkReject = () => {\n    const ids = Array.from(selectedRegistrations);\n    bulkRejectMutation.mutate(ids);\n  };\n\n  const handleBulkDelete = () => {\n    const ids = Array.from(selectedRegistrations);\n    bulkDeleteMutation.mutate(ids);\n  };\n\n  const handleViewActivityLog = (registration: Registration) => {\n    setActivityTarget({ type: \"registration\", id: registration.id });\n    setActivityLogDialogOpen(true);\n  };\n\n  const handleQRImageUpload = (file: File) => {\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please upload an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64String = reader.result as string;\n      setQrImagePreview(base64String);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) handleQRImageUpload(file);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const file = e.dataTransfer.files[0];\n    if (file) handleQRImageUpload(file);\n  };\n\n  const handleSaveQRCode = () => {\n    if (!qrImagePreview) {\n      toast({\n        title: \"No Image\",\n        description: \"Please upload a QR code image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateQRMutation.mutate({ qrCodeUrl: qrImagePreview });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge className=\"bg-warning/10 text-warning hover:bg-warning/20 border-warning/20\" data-testid=\"badge-status-pending\">Pending</Badge>;\n      case \"approved\":\n        return <Badge className=\"bg-success/10 text-success hover:bg-success/20 border-success/20\" data-testid=\"badge-status-approved\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\" data-testid=\"badge-status-rejected\">Rejected</Badge>;\n    }\n  };\n\n  const handleExportToExcel = () => {\n    if (!allRegistrations || allRegistrations.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No registrations to export.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const exportData = filteredRegistrations.map((reg) => ({\n      \"Registration ID\": reg.id,\n      \"Game\": selectedGame.toUpperCase(),\n      \"Mode\": activeMode.charAt(0).toUpperCase() + activeMode.slice(1),\n      \"Team Name\": reg.teamName || \"N/A\",\n      \"Player 1 Name\": reg.playerName,\n      \"Player 1 Game ID\": reg.gameId,\n      \"WhatsApp\": reg.whatsapp,\n      \"Player 2 Name\": reg.player2Name || \"N/A\",\n      \"Player 2 Game ID\": reg.player2GameId || \"N/A\",\n      \"Player 3 Name\": reg.player3Name || \"N/A\",\n      \"Player 3 Game ID\": reg.player3GameId || \"N/A\",\n      \"Player 4 Name\": reg.player4Name || \"N/A\",\n      \"Player 4 Game ID\": reg.player4GameId || \"N/A\",\n      \"Transaction ID\": reg.transactionId,\n      \"Payment Verified\": reg.paymentVerified === 1 ? \"Yes\" : \"No\",\n      \"Flagged\": reg.isFlagged === 1 ? \"Yes\" : \"No\",\n      \"Admin Notes\": reg.adminNotes || \"N/A\",\n      \"Status\": reg.status.charAt(0).toUpperCase() + reg.status.slice(1),\n      \"Submitted At\": new Date(reg.submittedAt).toLocaleString(),\n      \"Last Modified\": reg.lastModifiedAt ? new Date(reg.lastModifiedAt).toLocaleString() : \"N/A\",\n      \"Modified By\": reg.lastModifiedBy || \"N/A\",\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Registrations\");\n\n    const filename = `${selectedGame}_${activeMode}_registrations_${new Date().toISOString().split('T')[0]}.xlsx`;\n    \n    XLSX.writeFile(workbook, filename);\n\n    toast({\n      title: \"Export Successful\",\n      description: `Downloaded ${filteredRegistrations.length} registrations`,\n    });\n  };\n\n  const handleExportWhatsAppNumbers = () => {\n    if (filteredRegistrations.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No registrations to export.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const whatsappNumbers = filteredRegistrations.map(reg => reg.whatsapp).join(\"\\n\");\n    copy(whatsappNumbers);\n    \n    toast({\n      title: \"Copied!\",\n      description: `${filteredRegistrations.length} WhatsApp numbers copied to clipboard.`,\n    });\n  };\n\n  const handleExportGameIDs = () => {\n    if (filteredRegistrations.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No registrations to export.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const gameIDs: string[] = [];\n    filteredRegistrations.forEach(reg => {\n      gameIDs.push(`${reg.playerName}: ${reg.gameId}`);\n      if (reg.player2GameId) gameIDs.push(`${reg.player2Name}: ${reg.player2GameId}`);\n      if (reg.player3GameId) gameIDs.push(`${reg.player3Name}: ${reg.player3GameId}`);\n      if (reg.player4GameId) gameIDs.push(`${reg.player4Name}: ${reg.player4GameId}`);\n    });\n    \n    copy(gameIDs.join(\"\\n\"));\n    \n    toast({\n      title: \"Copied!\",\n      description: `${gameIDs.length} Game IDs copied to clipboard.`,\n    });\n  };\n\n  const handleExportSelected = () => {\n    if (selectedRegistrations.size === 0) {\n      toast({\n        title: \"No Selection\",\n        description: \"Please select registrations to export.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedData = filteredRegistrations.filter(reg => selectedRegistrations.has(reg.id));\n    \n    const exportData = selectedData.map((reg) => ({\n      \"Registration ID\": reg.id,\n      \"Game\": selectedGame.toUpperCase(),\n      \"Mode\": activeMode.charAt(0).toUpperCase() + activeMode.slice(1),\n      \"Team Name\": reg.teamName || \"N/A\",\n      \"Player 1 Name\": reg.playerName,\n      \"Player 1 Game ID\": reg.gameId,\n      \"WhatsApp\": reg.whatsapp,\n      \"Player 2 Name\": reg.player2Name || \"N/A\",\n      \"Player 2 Game ID\": reg.player2GameId || \"N/A\",\n      \"Player 3 Name\": reg.player3Name || \"N/A\",\n      \"Player 3 Game ID\": reg.player3GameId || \"N/A\",\n      \"Player 4 Name\": reg.player4Name || \"N/A\",\n      \"Player 4 Game ID\": reg.player4GameId || \"N/A\",\n      \"Transaction ID\": reg.transactionId,\n      \"Payment Verified\": reg.paymentVerified === 1 ? \"Yes\" : \"No\",\n      \"Flagged\": reg.isFlagged === 1 ? \"Yes\" : \"No\",\n      \"Admin Notes\": reg.adminNotes || \"N/A\",\n      \"Status\": reg.status.charAt(0).toUpperCase() + reg.status.slice(1),\n      \"Submitted At\": new Date(reg.submittedAt).toLocaleString(),\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(exportData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Selected Registrations\");\n\n    const filename = `${selectedGame}_${activeMode}_selected_${new Date().toISOString().split('T')[0]}.xlsx`;\n    \n    XLSX.writeFile(workbook, filename);\n\n    toast({\n      title: \"Export Successful\",\n      description: `Downloaded ${selectedData.length} selected registrations`,\n    });\n  };\n\n  const handlePrintView = () => {\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n\n    const printContent = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>${selectedGame.toUpperCase()} ${activeMode} Registrations</title>\n          <style>\n            body { font-family: Arial, sans-serif; padding: 20px; }\n            h1 { color: #333; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            th { background-color: #f2f2f2; }\n            @media print {\n              button { display: none; }\n            }\n          </style>\n        </head>\n        <body>\n          <h1>${selectedGame.toUpperCase()} - ${activeMode.charAt(0).toUpperCase() + activeMode.slice(1)} Registrations</h1>\n          <p>Total: ${stats.total} | Pending: ${stats.pending} | Approved: ${stats.approved} | Rejected: ${stats.rejected}</p>\n          <table>\n            <thead>\n              <tr>\n                <th>Team Name</th>\n                <th>Player Name</th>\n                <th>Game ID</th>\n                <th>WhatsApp</th>\n                <th>Transaction ID</th>\n                <th>Status</th>\n                <th>Submitted</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${filteredRegistrations.map(reg => `\n                <tr>\n                  <td>${reg.teamName || 'N/A'}</td>\n                  <td>${reg.playerName}</td>\n                  <td>${reg.gameId}</td>\n                  <td>${reg.whatsapp}</td>\n                  <td>${reg.transactionId}</td>\n                  <td>${reg.status}</td>\n                  <td>${new Date(reg.submittedAt).toLocaleString()}</td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n          <button onclick=\"window.print()\" style=\"margin-top: 20px; padding: 10px 20px; cursor: pointer;\">Print</button>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n  };\n\n  const toggleRegistrationSelection = (id: string) => {\n    const newSelection = new Set(selectedRegistrations);\n    if (newSelection.has(id)) {\n      newSelection.delete(id);\n    } else {\n      newSelection.add(id);\n    }\n    setSelectedRegistrations(newSelection);\n  };\n\n  const toggleSelectAll = () => {\n    if (selectedRegistrations.size === paginatedRegistrations.length) {\n      setSelectedRegistrations(new Set());\n    } else {\n      setSelectedRegistrations(new Set(paginatedRegistrations.map(r => r.id)));\n    }\n  };\n\n  const getPlayerInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const handleCopy = (text: string, label: string) => {\n    copy(text);\n    toast({\n      title: \"Copied!\",\n      description: `${label} copied to clipboard`,\n    });\n  };\n\n  const handleViewImage = (imageUrl: string) => {\n    setLightboxImage(imageUrl);\n    setLightboxOpen(true);\n  };\n\n  // Early return for auth check\n  if (authLoading || !authStatus?.authenticated) {\n    return (\n      <div className=\"min-h-screen bg-background pt-20 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-64 mb-4\" />\n          <Skeleton className=\"h-6 w-96 mb-8\" />\n          <Skeleton className=\"h-48 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate filtered registrations and stats\n  let filteredRegistrations = (allRegistrations || []).filter((reg) => {\n    if (reg.gameType !== selectedGame) return false;\n    if (reg.tournamentType !== activeMode) return false;\n    if (statusFilter !== \"all\" && reg.status !== statusFilter) return false;\n    \n    // Search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      const matchesSearch = \n        reg.playerName.toLowerCase().includes(query) ||\n        reg.gameId.toLowerCase().includes(query) ||\n        reg.whatsapp.includes(query) ||\n        reg.transactionId.toLowerCase().includes(query) ||\n        (reg.teamName && reg.teamName.toLowerCase().includes(query)) ||\n        (reg.player2Name && reg.player2Name.toLowerCase().includes(query)) ||\n        (reg.player3Name && reg.player3Name.toLowerCase().includes(query)) ||\n        (reg.player4Name && reg.player4Name.toLowerCase().includes(query)) ||\n        (reg.adminNotes && reg.adminNotes.toLowerCase().includes(query));\n      \n      if (!matchesSearch) return false;\n    }\n    \n    // Date filter\n    if (dateFilter !== \"all\") {\n      const regDate = new Date(reg.submittedAt);\n      const now = new Date();\n      if (dateFilter === \"today\") {\n        if (format(regDate, \"yyyy-MM-dd\") !== format(now, \"yyyy-MM-dd\")) return false;\n      } else if (dateFilter === \"week\") {\n        if (isBefore(regDate, subDays(now, 7))) return false;\n      } else if (dateFilter === \"month\") {\n        if (isBefore(regDate, subDays(now, 30))) return false;\n      }\n    }\n    \n    // Flag filter\n    if (flagFilter !== \"all\") {\n      if (flagFilter === \"flagged\" && reg.isFlagged !== 1) return false;\n      if (flagFilter === \"unflagged\" && reg.isFlagged !== 0) return false;\n    }\n    \n    // Payment filter\n    if (paymentFilter !== \"all\") {\n      if (paymentFilter === \"verified\" && reg.paymentVerified !== 1) return false;\n      if (paymentFilter === \"unverified\" && reg.paymentVerified !== 0) return false;\n    }\n    \n    return true;\n  });\n\n  const comprehensiveStats = {\n    totalRegistrations: allRegistrations?.length || 0,\n    totalRevenue: allRegistrations?.reduce((sum, reg) => {\n      if (reg.status === \"approved\") {\n        const config = TOURNAMENT_CONFIG[reg.gameType as keyof typeof TOURNAMENT_CONFIG][reg.tournamentType as keyof typeof TOURNAMENT_CONFIG.bgmi];\n        return sum + config.entryFee;\n      }\n      return sum;\n    }, 0) || 0,\n    totalPending: allRegistrations?.filter(r => r.status === \"pending\").length || 0,\n    totalApproved: allRegistrations?.filter(r => r.status === \"approved\").length || 0,\n    approvalRate: allRegistrations && allRegistrations.length > 0 \n      ? Math.round((allRegistrations.filter(r => r.status === \"approved\").length / allRegistrations.length) * 100)\n      : 0,\n    totalFlagged: allRegistrations?.filter(r => r.isFlagged === 1).length || 0,\n    totalVerified: allRegistrations?.filter(r => r.paymentVerified === 1).length || 0,\n  };\n\n  // Chart data calculations\n  const gameTypeData = [\n    {\n      name: \"BGMI\",\n      registrations: allRegistrations?.filter(r => r.gameType === \"bgmi\").length || 0,\n      approved: allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.status === \"approved\").length || 0,\n      pending: allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.status === \"pending\").length || 0,\n      rejected: allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.status === \"rejected\").length || 0,\n    },\n    {\n      name: \"Free Fire\",\n      registrations: allRegistrations?.filter(r => r.gameType === \"freefire\").length || 0,\n      approved: allRegistrations?.filter(r => r.gameType === \"freefire\" && r.status === \"approved\").length || 0,\n      pending: allRegistrations?.filter(r => r.gameType === \"freefire\" && r.status === \"pending\").length || 0,\n      rejected: allRegistrations?.filter(r => r.gameType === \"freefire\" && r.status === \"rejected\").length || 0,\n    },\n  ];\n\n  const modeData = [\n    {\n      name: \"Solo\",\n      registrations: allRegistrations?.filter(r => r.tournamentType === \"solo\").length || 0,\n      approved: allRegistrations?.filter(r => r.tournamentType === \"solo\" && r.status === \"approved\").length || 0,\n    },\n    {\n      name: \"Duo\",\n      registrations: allRegistrations?.filter(r => r.tournamentType === \"duo\").length || 0,\n      approved: allRegistrations?.filter(r => r.tournamentType === \"duo\" && r.status === \"approved\").length || 0,\n    },\n    {\n      name: \"Squad\",\n      registrations: allRegistrations?.filter(r => r.tournamentType === \"squad\").length || 0,\n      approved: allRegistrations?.filter(r => r.tournamentType === \"squad\" && r.status === \"approved\").length || 0,\n    },\n  ];\n\n  const revenueData = [\n    {\n      name: \"BGMI Solo\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.tournamentType === \"solo\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.bgmi.solo.entryFee,\n    },\n    {\n      name: \"BGMI Duo\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.tournamentType === \"duo\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.bgmi.duo.entryFee,\n    },\n    {\n      name: \"BGMI Squad\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"bgmi\" && r.tournamentType === \"squad\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.bgmi.squad.entryFee,\n    },\n    {\n      name: \"FF Solo\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"freefire\" && r.tournamentType === \"solo\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.freefire.solo.entryFee,\n    },\n    {\n      name: \"FF Duo\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"freefire\" && r.tournamentType === \"duo\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.freefire.duo.entryFee,\n    },\n    {\n      name: \"FF Squad\",\n      revenue: (allRegistrations?.filter(r => r.gameType === \"freefire\" && r.tournamentType === \"squad\" && r.status === \"approved\").length || 0) * TOURNAMENT_CONFIG.freefire.squad.entryFee,\n    },\n  ].filter(item => item.revenue > 0);\n\n  // Registration trends over time (group by day)\n  const trendData = allRegistrations?.reduce((acc: any[], reg) => {\n    const date = format(startOfDay(new Date(reg.submittedAt)), \"MMM dd\");\n    const existing = acc.find(item => item.date === date);\n    if (existing) {\n      existing.registrations += 1;\n      if (reg.status === \"approved\") existing.approved += 1;\n    } else {\n      acc.push({\n        date,\n        registrations: 1,\n        approved: reg.status === \"approved\" ? 1 : 0,\n      });\n    }\n    return acc;\n  }, []).slice(-7) || []; // Last 7 days\n\n  const COLORS = {\n    bgmi: \"hsl(var(--bgmi))\",\n    freefire: \"hsl(var(--freefire))\",\n    primary: \"hsl(var(--primary))\",\n    success: \"hsl(var(--success))\",\n    warning: \"hsl(var(--warning))\",\n    destructive: \"hsl(var(--destructive))\",\n  };\n\n  const stats = {\n    total: filteredRegistrations.length,\n    pending: filteredRegistrations.filter((r) => r.status === \"pending\").length,\n    approved: filteredRegistrations.filter((r) => r.status === \"approved\").length,\n    rejected: filteredRegistrations.filter((r) => r.status === \"rejected\").length,\n  };\n\n  const totalPages = Math.ceil(filteredRegistrations.length / ITEMS_PER_PAGE);\n  const paginatedRegistrations = filteredRegistrations.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background pt-20 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <Skeleton className=\"h-12 w-64 mb-4\" />\n          <Skeleton className=\"h-6 w-96 mb-8\" />\n          <Skeleton className=\"h-48 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pt-20 pb-16\">\n      <div className=\"max-w-[1800px] mx-auto px-4 md:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8\"\n        >\n          <div>\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Shield className=\"w-10 h-10 text-primary\" />\n              <div>\n                <h1 className=\"text-4xl font-bold\" data-testid=\"heading-admin-dashboard\">Advanced Admin Dashboard</h1>\n                <p className=\"text-muted-foreground\">Complete tournament management and analytics</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              className=\"gap-2\"\n              onClick={() => setActivityLogDialogOpen(true)}\n              data-testid=\"button-view-activity-log\"\n            >\n              <Activity className=\"w-4 h-4\" />\n              Activity Log\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"gap-2\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              Logout\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Advanced Stats Overview */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-7 gap-4 mb-8\"\n        >\n          <Card data-testid=\"card-total-registrations\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <Users className=\"w-6 h-6 mx-auto mb-2 text-primary\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Total</p>\n                <p className=\"text-2xl font-bold\">\n                  <CountUp end={comprehensiveStats.totalRegistrations} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-revenue\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <DollarSign className=\"w-6 h-6 mx-auto mb-2 text-success\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Revenue</p>\n                <p className=\"text-2xl font-bold text-success\">\n                  ₹<CountUp end={comprehensiveStats.totalRevenue} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-pending\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <Clock className=\"w-6 h-6 mx-auto mb-2 text-warning\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Pending</p>\n                <p className=\"text-2xl font-bold text-warning\">\n                  <CountUp end={comprehensiveStats.totalPending} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-approved\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <CheckCircle2 className=\"w-6 h-6 mx-auto mb-2 text-success\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Approved</p>\n                <p className=\"text-2xl font-bold text-success\">\n                  <CountUp end={comprehensiveStats.totalApproved} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-approval-rate\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-6 h-6 mx-auto mb-2 text-primary\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Rate</p>\n                <p className=\"text-2xl font-bold\">\n                  <CountUp end={comprehensiveStats.approvalRate} duration={1} />%\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-flagged\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <Flag className=\"w-6 h-6 mx-auto mb-2 text-destructive\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Flagged</p>\n                <p className=\"text-2xl font-bold text-destructive\">\n                  <CountUp end={comprehensiveStats.totalFlagged} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-verified\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <UserCheck className=\"w-6 h-6 mx-auto mb-2 text-success\" />\n                <p className=\"text-xs text-muted-foreground mb-1\">Verified</p>\n                <p className=\"text-2xl font-bold\">\n                  <CountUp end={comprehensiveStats.totalVerified} duration={1} />\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Advanced Analytics Charts - Collapsible */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"mb-8\"\n        >\n          <Button\n            variant=\"outline\"\n            className=\"w-full mb-4 gap-2\"\n            onClick={() => setShowAdvancedStats(!showAdvancedStats)}\n            data-testid=\"button-toggle-analytics\"\n          >\n            <BarChart3 className=\"w-4 h-4\" />\n            {showAdvancedStats ? \"Hide\" : \"Show\"} Advanced Analytics\n            <ArrowUpDown className=\"w-4 h-4 ml-auto\" />\n          </Button>\n\n          {showAdvancedStats && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              {/* Game Type Distribution */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Trophy className=\"w-5 h-5\" />\n                    Game Distribution\n                  </CardTitle>\n                  <CardDescription>Registration breakdown by game type</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <BarChart data={gameTypeData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <RechartsTooltip />\n                      <Legend />\n                      <Bar dataKey=\"approved\" fill={COLORS.success} name=\"Approved\" />\n                      <Bar dataKey=\"pending\" fill={COLORS.warning} name=\"Pending\" />\n                      <Bar dataKey=\"rejected\" fill={COLORS.destructive} name=\"Rejected\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Mode Distribution */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5\" />\n                    Mode Distribution\n                  </CardTitle>\n                  <CardDescription>Registrations by tournament mode</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <BarChart data={modeData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <RechartsTooltip />\n                      <Legend />\n                      <Bar dataKey=\"registrations\" fill={COLORS.primary} name=\"Total\" />\n                      <Bar dataKey=\"approved\" fill={COLORS.success} name=\"Approved\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Revenue Chart */}\n              {revenueData.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-5 h-5\" />\n                      Revenue Breakdown\n                    </CardTitle>\n                    <CardDescription>Entry fee revenue by tournament type</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <BarChart data={revenueData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <RechartsTooltip />\n                        <Bar dataKey=\"revenue\" fill={COLORS.success} name=\"Revenue (₹)\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Trend Chart */}\n              {trendData.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5\" />\n                      7-Day Trend\n                    </CardTitle>\n                    <CardDescription>Registration trends over the last week</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ResponsiveContainer width=\"100%\" height={250}>\n                      <LineChart data={trendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <RechartsTooltip />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"registrations\" stroke={COLORS.primary} name=\"Total\" />\n                        <Line type=\"monotone\" dataKey=\"approved\" stroke={COLORS.success} name=\"Approved\" />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </motion.div>\n\n        <Tabs value={selectedGame} onValueChange={(value) => setSelectedGame(value as any)}>\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\" data-testid=\"tabs-game-selection\">\n            <TabsTrigger value=\"bgmi\" data-testid=\"tab-bgmi\">BGMI</TabsTrigger>\n            <TabsTrigger value=\"freefire\" data-testid=\"tab-freefire\">Free Fire</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value={selectedGame}>\n            <Tabs value={activeMode} onValueChange={(value) => setActiveMode(value as any)}>\n              <TabsList className=\"grid w-full max-w-md grid-cols-3 mb-6\" data-testid=\"tabs-mode-selection\">\n                <TabsTrigger value=\"solo\" data-testid=\"tab-solo\">Solo</TabsTrigger>\n                <TabsTrigger value=\"duo\" data-testid=\"tab-duo\">Duo</TabsTrigger>\n                <TabsTrigger value=\"squad\" data-testid=\"tab-squad\">Squad</TabsTrigger>\n              </TabsList>\n\n              {/* Advanced Search and Filters */}\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Filter className=\"w-5 h-5\" />\n                    Advanced Filters & Search\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Search Bar */}\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by name, Game ID, WhatsApp, Transaction ID, or notes...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search\"\n                    />\n                  </div>\n\n                  {/* Filter Row */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <Label className=\"text-xs mb-2 block\">Status</Label>\n                      <Select value={statusFilter} onValueChange={(value: any) => setStatusFilter(value)}>\n                        <SelectTrigger data-testid=\"select-status-filter\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Status</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"approved\">Approved</SelectItem>\n                          <SelectItem value=\"rejected\">Rejected</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs mb-2 block\">Date Range</Label>\n                      <Select value={dateFilter} onValueChange={(value: any) => setDateFilter(value)}>\n                        <SelectTrigger data-testid=\"select-date-filter\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Time</SelectItem>\n                          <SelectItem value=\"today\">Today</SelectItem>\n                          <SelectItem value=\"week\">Last 7 Days</SelectItem>\n                          <SelectItem value=\"month\">Last 30 Days</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs mb-2 block\">Flagged</Label>\n                      <Select value={flagFilter} onValueChange={(value: any) => setFlagFilter(value)}>\n                        <SelectTrigger data-testid=\"select-flag-filter\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All</SelectItem>\n                          <SelectItem value=\"flagged\">Flagged Only</SelectItem>\n                          <SelectItem value=\"unflagged\">Not Flagged</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs mb-2 block\">Payment</Label>\n                      <Select value={paymentFilter} onValueChange={(value: any) => setPaymentFilter(value)}>\n                        <SelectTrigger data-testid=\"select-payment-filter\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All</SelectItem>\n                          <SelectItem value=\"verified\">Verified</SelectItem>\n                          <SelectItem value=\"unverified\">Unverified</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  {/* Active Filters Display */}\n                  {(searchQuery || statusFilter !== \"all\" || dateFilter !== \"all\" || flagFilter !== \"all\" || paymentFilter !== \"all\") && (\n                    <div className=\"flex flex-wrap items-center gap-2 pt-2 border-t\">\n                      <span className=\"text-xs text-muted-foreground\">Active filters:</span>\n                      {searchQuery && (\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          Search: {searchQuery}\n                          <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setSearchQuery(\"\")} />\n                        </Badge>\n                      )}\n                      {statusFilter !== \"all\" && (\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          Status: {statusFilter}\n                          <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setStatusFilter(\"all\")} />\n                        </Badge>\n                      )}\n                      {dateFilter !== \"all\" && (\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          Date: {dateFilter}\n                          <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setDateFilter(\"all\")} />\n                        </Badge>\n                      )}\n                      {flagFilter !== \"all\" && (\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          Flag: {flagFilter}\n                          <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setFlagFilter(\"all\")} />\n                        </Badge>\n                      )}\n                      {paymentFilter !== \"all\" && (\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          Payment: {paymentFilter}\n                          <X className=\"w-3 h-3 cursor-pointer\" onClick={() => setPaymentFilter(\"all\")} />\n                        </Badge>\n                      )}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSearchQuery(\"\");\n                          setStatusFilter(\"all\");\n                          setDateFilter(\"all\");\n                          setFlagFilter(\"all\");\n                          setPaymentFilter(\"all\");\n                        }}\n                        className=\"h-6 text-xs\"\n                      >\n                        Clear All\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Bulk Actions and Export Options */}\n              <Card className=\"mb-6\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex flex-wrap items-center gap-2\">\n                    <span className=\"text-sm text-muted-foreground mr-2\">\n                      {stats.total} results {selectedRegistrations.size > 0 && `(${selectedRegistrations.size} selected)`}\n                    </span>\n\n                    {selectedRegistrations.size > 0 && (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          className=\"gap-2\"\n                          onClick={handleBulkApprove}\n                          data-testid=\"button-bulk-approve\"\n                        >\n                          <Check className=\"w-4 h-4\" />\n                          Approve Selected\n                        </Button>\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"gap-2\"\n                          onClick={handleBulkReject}\n                          data-testid=\"button-bulk-reject\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                          Reject Selected\n                        </Button>\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"gap-2\"\n                          onClick={() => setBulkDeleteDialogOpen(true)}\n                          data-testid=\"button-bulk-delete\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                          Delete Selected\n                        </Button>\n\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"gap-2\"\n                          onClick={handleExportSelected}\n                          data-testid=\"button-export-selected\"\n                        >\n                          <FileSpreadsheet className=\"w-4 h-4\" />\n                          Export Selected\n                        </Button>\n                      </>\n                    )}\n\n                    {stats.pending > 0 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"gap-2\"\n                        onClick={() => setApproveAllDialogOpen(true)}\n                        data-testid=\"button-approve-all-pending\"\n                      >\n                        <CheckCircle className=\"w-4 h-4\" />\n                        Approve All Pending ({stats.pending})\n                      </Button>\n                    )}\n\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"gap-2\"\n                      onClick={() => setQrDialogOpen(true)}\n                      data-testid=\"button-manage-qr\"\n                    >\n                      <QrCode className=\"w-4 h-4\" />\n                      Manage QR\n                    </Button>\n\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button size=\"sm\" variant=\"outline\" className=\"gap-2\" data-testid=\"button-export-menu\">\n                          <Download className=\"w-4 h-4\" />\n                          Export\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Export Options</DropdownMenuLabel>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem onClick={handleExportToExcel}>\n                          <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                          Export All to Excel\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={handleExportWhatsAppNumbers}>\n                          <PhoneCall className=\"w-4 h-4 mr-2\" />\n                          Copy WhatsApp Numbers\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={handleExportGameIDs}>\n                          <Gamepad2 className=\"w-4 h-4 mr-2\" />\n                          Copy Game IDs\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={handlePrintView}>\n                          <Printer className=\"w-4 h-4 mr-2\" />\n                          Print View\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"gap-2\"\n                      onClick={handleReset}\n                      data-testid=\"button-reset-tournament\"\n                    >\n                      <RefreshCw className=\"w-4 h-4\" />\n                      Reset Tournament\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Mode Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                <Card data-testid=\"card-filtered-total\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Total</p>\n                        <p className=\"text-3xl font-bold\" data-testid=\"text-filtered-total\">{stats.total}</p>\n                      </div>\n                      <BarChart3 className=\"w-8 h-8 text-primary\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-filtered-pending\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Pending</p>\n                        <p className=\"text-3xl font-bold text-warning\" data-testid=\"text-filtered-pending\">{stats.pending}</p>\n                      </div>\n                      <Clock className=\"w-8 h-8 text-warning\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-filtered-approved\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Approved</p>\n                        <p className=\"text-3xl font-bold text-success\" data-testid=\"text-filtered-approved\">{stats.approved}</p>\n                      </div>\n                      <CheckCircle2 className=\"w-8 h-8 text-success\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-filtered-rejected\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Rejected</p>\n                        <p className=\"text-3xl font-bold text-destructive\" data-testid=\"text-filtered-rejected\">{stats.rejected}</p>\n                      </div>\n                      <XCircle className=\"w-8 h-8 text-destructive\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Registration Cards */}\n              {[\"solo\", \"duo\", \"squad\"].map((mode) => (\n                <TabsContent key={mode} value={mode} className=\"space-y-4\">\n                  {filteredRegistrations.length === 0 ? (\n                    <Card data-testid=\"card-no-registrations\">\n                      <CardContent className=\"pt-6\">\n                        <div className=\"text-center py-12\">\n                          <Users className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                          <h3 className=\"text-xl font-semibold mb-2\">No Registrations Found</h3>\n                          <p className=\"text-muted-foreground\">\n                            {searchQuery || statusFilter !== \"all\" || dateFilter !== \"all\" || flagFilter !== \"all\" || paymentFilter !== \"all\"\n                              ? \"Try adjusting your filters or search query.\"\n                              : \"No registrations found for this tournament mode.\"}\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <>\n                      {paginatedRegistrations.length > 0 && (\n                        <div className=\"flex items-center gap-2 px-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedRegistrations.size === paginatedRegistrations.length && paginatedRegistrations.length > 0}\n                            onChange={toggleSelectAll}\n                            className=\"w-4 h-4 cursor-pointer\"\n                            data-testid=\"checkbox-select-all\"\n                          />\n                          <label className=\"text-sm text-muted-foreground cursor-pointer\" onClick={toggleSelectAll}>\n                            Select all on this page\n                          </label>\n                        </div>\n                      )}\n\n                      {paginatedRegistrations.map((registration) => (\n                        <Card key={registration.id} data-testid={`card-registration-${registration.id}`} className={`overflow-hidden ${registration.isFlagged === 1 ? 'border-destructive/50 bg-destructive/5' : ''}`}>\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n                              <div className=\"flex items-start gap-3 flex-1\">\n                                <input\n                                  type=\"checkbox\"\n                                  checked={selectedRegistrations.has(registration.id)}\n                                  onChange={() => toggleRegistrationSelection(registration.id)}\n                                  className=\"mt-1 w-4 h-4 cursor-pointer\"\n                                  data-testid={`checkbox-registration-${registration.id}`}\n                                />\n                                <Avatar className=\"w-12 h-12\">\n                                  <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n                                    {getPlayerInitials(registration.playerName)}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1\">\n                                  <CardTitle className=\"flex items-center gap-2 flex-wrap\">\n                                    <span data-testid={`text-team-name-${registration.id}`}>\n                                      {registration.teamName || registration.playerName}\n                                    </span>\n                                    {getStatusBadge(registration.status)}\n                                    {registration.isFlagged === 1 && (\n                                      <Badge variant=\"destructive\" className=\"gap-1\">\n                                        <Flag className=\"w-3 h-3\" />\n                                        Flagged\n                                      </Badge>\n                                    )}\n                                    {registration.paymentVerified === 1 && (\n                                      <Badge className=\"gap-1 bg-success/10 text-success hover:bg-success/20 border-success/20\">\n                                        <BadgeCheck className=\"w-3 h-3\" />\n                                        Verified\n                                      </Badge>\n                                    )}\n                                  </CardTitle>\n                                  <CardDescription className=\"mt-1 flex items-center gap-2 flex-wrap\">\n                                    <span className=\"text-xs text-muted-foreground\" data-testid={`text-submitted-time-${registration.id}`}>\n                                      {formatDistanceToNow(new Date(registration.submittedAt), { addSuffix: true })}\n                                    </span>\n                                    {registration.lastModifiedAt && (\n                                      <>\n                                        <span className=\"text-xs text-muted-foreground\">•</span>\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          Modified {formatDistanceToNow(new Date(registration.lastModifiedAt), { addSuffix: true })}\n                                          {registration.lastModifiedBy && ` by ${registration.lastModifiedBy}`}\n                                        </span>\n                                      </>\n                                    )}\n                                  </CardDescription>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                {registration.status === \"pending\" && (\n                                  <>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"default\"\n                                      className=\"gap-2\"\n                                      onClick={() => handleApprove(registration.id)}\n                                      disabled={updateStatusMutation.isPending}\n                                      data-testid={`button-approve-${registration.id}`}\n                                    >\n                                      <Check className=\"w-4 h-4\" />\n                                      Approve\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"destructive\"\n                                      className=\"gap-2\"\n                                      onClick={() => handleReject(registration.id)}\n                                      disabled={updateStatusMutation.isPending}\n                                      data-testid={`button-reject-${registration.id}`}\n                                    >\n                                      <X className=\"w-4 h-4\" />\n                                      Reject\n                                    </Button>\n                                  </>\n                                )}\n                                \n                                <DropdownMenu>\n                                  <DropdownMenuTrigger asChild>\n                                    <Button size=\"sm\" variant=\"outline\" className=\"gap-2\" data-testid={`button-actions-${registration.id}`}>\n                                      <MoreVertical className=\"w-4 h-4\" />\n                                    </Button>\n                                  </DropdownMenuTrigger>\n                                  <DropdownMenuContent align=\"end\">\n                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem onClick={() => handleOpenEdit(registration)}>\n                                      <Edit className=\"w-4 h-4 mr-2\" />\n                                      Edit Details\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => handleOpenNotes(registration)}>\n                                      <StickyNote className=\"w-4 h-4 mr-2\" />\n                                      {registration.adminNotes ? \"Edit Notes\" : \"Add Notes\"}\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => handleFlag(registration.id)}>\n                                      <Flag className=\"w-4 h-4 mr-2\" />\n                                      {registration.isFlagged === 1 ? \"Unflag\" : \"Flag\"}\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => handleVerifyPayment(registration.id)}>\n                                      <BadgeCheck className=\"w-4 h-4 mr-2\" />\n                                      {registration.paymentVerified === 1 ? \"Unverify Payment\" : \"Verify Payment\"}\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={() => handleViewActivityLog(registration)}>\n                                      <Eye className=\"w-4 h-4 mr-2\" />\n                                      View History\n                                    </DropdownMenuItem>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem \n                                      onClick={() => handleOpenDelete(registration.id)}\n                                      className=\"text-destructive focus:text-destructive\"\n                                    >\n                                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                                      Delete\n                                    </DropdownMenuItem>\n                                  </DropdownMenuContent>\n                                </DropdownMenu>\n                              </div>\n                            </div>\n                          </CardHeader>\n\n                          <Separator />\n\n                          <CardContent className=\"pt-4 space-y-4\">\n                            {/* Admin Notes Display */}\n                            {registration.adminNotes && (\n                              <div className=\"bg-muted/50 border rounded-lg p-3\">\n                                <h4 className=\"text-sm font-semibold mb-1 flex items-center gap-2\">\n                                  <FileText className=\"w-4 h-4\" />\n                                  Admin Notes\n                                </h4>\n                                <p className=\"text-sm whitespace-pre-wrap\">{registration.adminNotes}</p>\n                              </div>\n                            )}\n\n                            <div>\n                              <h4 className=\"text-sm font-semibold mb-3 flex items-center gap-2\">\n                                <Users className=\"w-4 h-4\" />\n                                Team Leader / Solo Player\n                              </h4>\n                              <div className=\"grid md:grid-cols-3 gap-4\">\n                                <div>\n                                  <p className=\"text-xs text-muted-foreground mb-1\">Player Name</p>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Avatar className=\"w-6 h-6\">\n                                      <AvatarFallback className=\"text-xs bg-muted\">\n                                        {getPlayerInitials(registration.playerName)}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                    <p className=\"font-medium\" data-testid={`text-player-name-${registration.id}`}>{registration.playerName}</p>\n                                  </div>\n                                </div>\n                                <div>\n                                  <p className=\"text-xs text-muted-foreground mb-1\">Game ID</p>\n                                  <div className=\"flex items-center gap-2\">\n                                    <p className=\"font-mono text-sm flex-1\" data-testid={`text-game-id-${registration.id}`}>{registration.gameId}</p>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"h-6 w-6\"\n                                      onClick={() => handleCopy(registration.gameId, \"Game ID\")}\n                                    >\n                                      <Copy className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                                <div>\n                                  <p className=\"text-xs text-muted-foreground mb-1\">WhatsApp</p>\n                                  <div className=\"flex items-center gap-2\">\n                                    <p className=\"font-mono text-sm flex-1\" data-testid={`text-whatsapp-${registration.id}`}>{registration.whatsapp}</p>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"h-6 w-6\"\n                                      onClick={() => handleCopy(registration.whatsapp, \"WhatsApp number\")}\n                                    >\n                                      <Copy className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {(registration.player2Name || registration.player3Name || registration.player4Name) && (\n                              <>\n                                <Separator />\n                                <div>\n                                  <h4 className=\"text-sm font-semibold mb-3\">Team Members</h4>\n                                  <div className=\"space-y-3\">\n                                    {registration.player2Name && (\n                                      <div className=\"grid md:grid-cols-2 gap-4\">\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Player 2 Name</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <Avatar className=\"w-6 h-6\">\n                                              <AvatarFallback className=\"text-xs bg-muted\">\n                                                {getPlayerInitials(registration.player2Name)}\n                                              </AvatarFallback>\n                                            </Avatar>\n                                            <p className=\"font-medium\" data-testid={`text-player2-name-${registration.id}`}>{registration.player2Name}</p>\n                                          </div>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Game ID</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <p className=\"font-mono text-sm flex-1\" data-testid={`text-player2-id-${registration.id}`}>{registration.player2GameId}</p>\n                                            <Button\n                                              variant=\"ghost\"\n                                              size=\"icon\"\n                                              className=\"h-6 w-6\"\n                                              onClick={() => handleCopy(registration.player2GameId || \"\", \"Game ID\")}\n                                            >\n                                              <Copy className=\"w-3 h-3\" />\n                                            </Button>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )}\n                                    {registration.player3Name && (\n                                      <div className=\"grid md:grid-cols-2 gap-4\">\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Player 3 Name</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <Avatar className=\"w-6 h-6\">\n                                              <AvatarFallback className=\"text-xs bg-muted\">\n                                                {getPlayerInitials(registration.player3Name)}\n                                              </AvatarFallback>\n                                            </Avatar>\n                                            <p className=\"font-medium\" data-testid={`text-player3-name-${registration.id}`}>{registration.player3Name}</p>\n                                          </div>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Game ID</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <p className=\"font-mono text-sm flex-1\" data-testid={`text-player3-id-${registration.id}`}>{registration.player3GameId}</p>\n                                            <Button\n                                              variant=\"ghost\"\n                                              size=\"icon\"\n                                              className=\"h-6 w-6\"\n                                              onClick={() => handleCopy(registration.player3GameId || \"\", \"Game ID\")}\n                                            >\n                                              <Copy className=\"w-3 h-3\" />\n                                            </Button>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )}\n                                    {registration.player4Name && (\n                                      <div className=\"grid md:grid-cols-2 gap-4\">\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Player 4 Name</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <Avatar className=\"w-6 h-6\">\n                                              <AvatarFallback className=\"text-xs bg-muted\">\n                                                {getPlayerInitials(registration.player4Name)}\n                                              </AvatarFallback>\n                                            </Avatar>\n                                            <p className=\"font-medium\" data-testid={`text-player4-name-${registration.id}`}>{registration.player4Name}</p>\n                                          </div>\n                                        </div>\n                                        <div>\n                                          <p className=\"text-xs text-muted-foreground mb-1\">Game ID</p>\n                                          <div className=\"flex items-center gap-2\">\n                                            <p className=\"font-mono text-sm flex-1\" data-testid={`text-player4-id-${registration.id}`}>{registration.player4GameId}</p>\n                                            <Button\n                                              variant=\"ghost\"\n                                              size=\"icon\"\n                                              className=\"h-6 w-6\"\n                                              onClick={() => handleCopy(registration.player4GameId || \"\", \"Game ID\")}\n                                            >\n                                              <Copy className=\"w-3 h-3\" />\n                                            </Button>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </>\n                            )}\n\n                            <Separator />\n                            <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                              <h4 className=\"text-sm font-semibold mb-3 flex items-center gap-2\">\n                                <DollarSign className=\"w-4 h-4\" />\n                                Payment Information\n                              </h4>\n                              <div className=\"grid md:grid-cols-2 gap-4\">\n                                <div>\n                                  <p className=\"text-xs text-muted-foreground mb-1\">Transaction ID</p>\n                                  <div className=\"flex items-center gap-2\">\n                                    <p className=\"font-mono text-sm font-semibold text-primary flex-1\" data-testid={`text-transaction-id-${registration.id}`}>\n                                      {registration.transactionId}\n                                    </p>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      onClick={() => handleCopy(registration.transactionId, \"Transaction ID\")}\n                                      data-testid={`button-copy-transaction-${registration.id}`}\n                                    >\n                                      <Copy className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                                {registration.paymentScreenshot && (\n                                  <div>\n                                    <p className=\"text-xs text-muted-foreground mb-1\">Payment Screenshot</p>\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      className=\"gap-2\"\n                                      onClick={() => handleViewImage(registration.paymentScreenshot || \"\")}\n                                      data-testid={`button-view-screenshot-${registration.id}`}\n                                    >\n                                      <ExternalLink className=\"w-4 h-4\" />\n                                      View Screenshot\n                                    </Button>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n\n                      {totalPages > 1 && (\n                        <div className=\"flex items-center justify-center gap-2 mt-6\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                            disabled={currentPage === 1}\n                            data-testid=\"button-prev-page\"\n                          >\n                            Previous\n                          </Button>\n                          <div className=\"flex items-center gap-1\">\n                            {Array.from({ length: Math.min(totalPages, 10) }, (_, i) => i + 1).map(page => (\n                              <Button\n                                key={page}\n                                variant={currentPage === page ? \"default\" : \"ghost\"}\n                                size=\"sm\"\n                                onClick={() => setCurrentPage(page)}\n                                className=\"w-10\"\n                                data-testid={`button-page-${page}`}\n                              >\n                                {page}\n                              </Button>\n                            ))}\n                            {totalPages > 10 && <span className=\"text-sm text-muted-foreground\">...</span>}\n                          </div>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                            disabled={currentPage === totalPages}\n                            data-testid=\"button-next-page\"\n                          >\n                            Next\n                          </Button>\n                        </div>\n                      )}\n                    </>\n                  )}\n                </TabsContent>\n              ))}\n            </Tabs>\n          </TabsContent>\n        </Tabs>\n\n        {/* QR Code Dialog */}\n        <Dialog open={qrDialogOpen} onOpenChange={setQrDialogOpen}>\n          <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-qr-management\">\n            <DialogHeader>\n              <DialogTitle>Manage QR Code</DialogTitle>\n              <DialogDescription>\n                Upload a new payment QR code for {selectedGame.toUpperCase()} {activeMode} tournament\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              {currentTournament?.qrCodeUrl && !qrImagePreview && (\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Current QR Code</p>\n                  <div className=\"border rounded-lg p-4 bg-muted/50\">\n                    <img\n                      src={currentTournament.qrCodeUrl}\n                      alt=\"Current QR Code\"\n                      className=\"w-full max-w-xs mx-auto rounded\"\n                      data-testid=\"img-current-qr\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Upload New QR Code</p>\n                <div\n                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                    isDragging\n                      ? \"border-primary bg-primary/10\"\n                      : \"border-muted-foreground/25 hover:border-primary/50\"\n                  }`}\n                  onDragOver={handleDragOver}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                  data-testid=\"dropzone-qr-upload\"\n                >\n                  {qrImagePreview ? (\n                    <div className=\"space-y-3\">\n                      <img\n                        src={qrImagePreview}\n                        alt=\"QR Preview\"\n                        className=\"w-full max-w-xs mx-auto rounded\"\n                        data-testid=\"img-qr-preview\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setQrImagePreview(null)}\n                        data-testid=\"button-remove-qr-preview\"\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mx-auto mb-4\">\n                        <Upload className=\"w-8 h-8 text-primary\" />\n                      </div>\n                      <p className=\"text-sm font-medium mb-1\">\n                        Drag and drop your QR code here\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mb-4\">\n                        or click to browse files\n                      </p>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleFileInputChange}\n                        className=\"hidden\"\n                        id=\"qr-upload\"\n                        data-testid=\"input-qr-file\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => document.getElementById('qr-upload')?.click()}\n                        className=\"gap-2\"\n                        data-testid=\"button-browse-qr\"\n                      >\n                        <ImageIcon className=\"w-4 h-4\" />\n                        Browse Files\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setQrDialogOpen(false);\n                    setQrImagePreview(null);\n                  }}\n                  data-testid=\"button-cancel-qr\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSaveQRCode}\n                  disabled={!qrImagePreview || updateQRMutation.isPending}\n                  data-testid=\"button-save-qr\"\n                >\n                  {updateQRMutation.isPending ? \"Uploading...\" : \"Save QR Code\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Notes Dialog */}\n        <Dialog open={notesDialogOpen} onOpenChange={setNotesDialogOpen}>\n          <DialogContent data-testid=\"dialog-notes\">\n            <DialogHeader>\n              <DialogTitle>Admin Notes</DialogTitle>\n              <DialogDescription>\n                Add or edit internal notes for this registration\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Textarea\n                value={currentNotes}\n                onChange={(e) => setCurrentNotes(e.target.value)}\n                placeholder=\"Add notes about this registration...\"\n                rows={6}\n                data-testid=\"textarea-notes\"\n              />\n              <div className=\"flex gap-3 justify-end\">\n                <Button variant=\"outline\" onClick={() => setNotesDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveNotes} disabled={notesMutation.isPending}>\n                  {notesMutation.isPending ? \"Saving...\" : \"Save Notes\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Dialog */}\n        <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-edit\">\n            <DialogHeader>\n              <DialogTitle>Edit Registration Details</DialogTitle>\n              <DialogDescription>\n                Update registration information\n              </DialogDescription>\n            </DialogHeader>\n            {editingRegistration && (\n              <div className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Team Name (Optional)</Label>\n                    <Input\n                      value={editingRegistration.teamName || \"\"}\n                      onChange={(e) => setEditingRegistration({...editingRegistration, teamName: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>Player Name *</Label>\n                    <Input\n                      value={editingRegistration.playerName}\n                      onChange={(e) => setEditingRegistration({...editingRegistration, playerName: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>Game ID *</Label>\n                    <Input\n                      value={editingRegistration.gameId}\n                      onChange={(e) => setEditingRegistration({...editingRegistration, gameId: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>WhatsApp *</Label>\n                    <Input\n                      value={editingRegistration.whatsapp}\n                      onChange={(e) => setEditingRegistration({...editingRegistration, whatsapp: e.target.value})}\n                    />\n                  </div>\n\n                  {/* Player 2 */}\n                  {(activeMode === \"duo\" || activeMode === \"squad\") && (\n                    <>\n                      <div>\n                        <Label>Player 2 Name</Label>\n                        <Input\n                          value={editingRegistration.player2Name || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player2Name: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Player 2 Game ID</Label>\n                        <Input\n                          value={editingRegistration.player2GameId || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player2GameId: e.target.value})}\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  {/* Player 3 & 4 for Squad */}\n                  {activeMode === \"squad\" && (\n                    <>\n                      <div>\n                        <Label>Player 3 Name</Label>\n                        <Input\n                          value={editingRegistration.player3Name || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player3Name: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Player 3 Game ID</Label>\n                        <Input\n                          value={editingRegistration.player3GameId || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player3GameId: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Player 4 Name</Label>\n                        <Input\n                          value={editingRegistration.player4Name || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player4Name: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label>Player 4 Game ID</Label>\n                        <Input\n                          value={editingRegistration.player4GameId || \"\"}\n                          onChange={(e) => setEditingRegistration({...editingRegistration, player4GameId: e.target.value})}\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  <div>\n                    <Label>Transaction ID *</Label>\n                    <Input\n                      value={editingRegistration.transactionId}\n                      onChange={(e) => setEditingRegistration({...editingRegistration, transactionId: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3 justify-end\">\n                  <Button variant=\"outline\" onClick={() => {\n                    setEditDialogOpen(false);\n                    setEditingRegistration(null);\n                  }}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleSaveEdit} disabled={editMutation.isPending}>\n                    {editMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-delete-confirm\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This action cannot be undone. This will permanently delete this registration\n                and decrement the tournament slot count.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction onClick={handleConfirmDelete} className=\"bg-destructive hover:bg-destructive/90\">\n                {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Bulk Delete Confirmation Dialog */}\n        <AlertDialog open={bulkDeleteDialogOpen} onOpenChange={setBulkDeleteDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-bulk-delete-confirm\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete {selectedRegistrations.size} Registrations?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This action cannot be undone. This will permanently delete {selectedRegistrations.size} selected\n                registrations and decrement the tournament slot counts.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction onClick={handleBulkDelete} className=\"bg-destructive hover:bg-destructive/90\">\n                {bulkDeleteMutation.isPending ? \"Deleting...\" : `Delete ${selectedRegistrations.size}`}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Approve All Dialog */}\n        <AlertDialog open={approveAllDialogOpen} onOpenChange={setApproveAllDialogOpen}>\n          <AlertDialogContent data-testid=\"dialog-approve-all-confirm\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>Approve All Pending Registrations?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This will approve {stats.pending} pending registrations for {selectedGame.toUpperCase()} {activeMode}.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction onClick={handleApproveAll}>\n                {approveAllMutation.isPending ? \"Approving...\" : `Approve ${stats.pending}`}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Activity Log Dialog */}\n        <Dialog open={activityLogDialogOpen} onOpenChange={setActivityLogDialogOpen}>\n          <DialogContent className=\"max-w-3xl max-h-[90vh]\" data-testid=\"dialog-activity-log\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Activity Log\n              </DialogTitle>\n              <DialogDescription>\n                {activityTarget.id ? \"Registration history\" : \"Recent admin actions\"}\n              </DialogDescription>\n            </DialogHeader>\n            <ScrollArea className=\"h-[500px] pr-4\">\n              <div className=\"space-y-4\">\n                {activityTarget.id && targetLogsError && (\n                  <div className=\"text-center py-8\">\n                    <AlertTriangle className=\"w-12 h-12 mx-auto text-destructive mb-2\" />\n                    <p className=\"text-destructive font-medium\">Failed to load activity logs</p>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Unable to fetch logs for this registration. Please try again.\n                    </p>\n                  </div>\n                )}\n                {!targetLogsError && (activityTarget.id ? targetActivityLogs : activityLogs)?.map((log) => (\n                  <Card key={log.id} className=\"p-4\">\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"outline\">{log.action}</Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            by {log.adminUsername}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(new Date(log.timestamp), \"PPpp\")}\n                        </p>\n                        {log.details && (\n                          <p className=\"text-sm mt-2\">\n                            {JSON.parse(log.details).playerName && (\n                              <span className=\"font-medium\">\n                                {JSON.parse(log.details).playerName}\n                              </span>\n                            )}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n                {!targetLogsError && (activityTarget.id ? targetActivityLogs : activityLogs)?.length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\">No activity logs found</p>\n                )}\n              </div>\n            </ScrollArea>\n          </DialogContent>\n        </Dialog>\n\n        {/* Lightbox for Payment Screenshots */}\n        <Lightbox\n          open={lightboxOpen}\n          close={() => setLightboxOpen(false)}\n          slides={[{ src: lightboxImage }]}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":105689},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\ndeclare module 'express-session' {\n  interface SessionData {\n    adminId?: string;\n  }\n}\n\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst MemoryStore = createMemoryStore(session);\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"tournament-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStore({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  })\n);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Wait for storage initialization before starting server\n  await storage.waitReady();\n  log(\"Database initialized successfully\");\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3042},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        // Gaming brand colors\n        bgmi: {\n          DEFAULT: \"hsl(25 95% 58% / <alpha-value>)\",\n          foreground: \"hsl(0 0% 100% / <alpha-value>)\",\n        },\n        freefire: {\n          DEFAULT: \"hsl(0 85% 60% / <alpha-value>)\",\n          foreground: \"hsl(0 0% 100% / <alpha-value>)\",\n        },\n        success: {\n          DEFAULT: \"hsl(142 76% 45% / <alpha-value>)\",\n          foreground: \"hsl(0 0% 100% / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(45 93% 58% / <alpha-value>)\",\n          foreground: \"hsl(0 0% 0% / <alpha-value>)\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4637},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertRegistrationSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\n// Auth middleware to protect admin routes\nfunction requireAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.session.adminId) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all tournaments with their slot counts\n  app.get(\"/api/tournaments\", async (req, res) => {\n    try {\n      const tournaments = await storage.getAllTournaments();\n      res.json(tournaments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tournaments\" });\n    }\n  });\n\n  // Get specific tournament\n  app.get(\"/api/tournaments/:gameType/:tournamentType\", async (req, res) => {\n    try {\n      const { gameType, tournamentType } = req.params;\n      const tournament = await storage.getTournament(\n        gameType as any,\n        tournamentType as any\n      );\n      if (!tournament) {\n        return res.status(404).json({ error: \"Tournament not found\" });\n      }\n      res.json(tournament);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tournament\" });\n    }\n  });\n\n  // Reset tournament (admin only)\n  app.post(\"/api/tournaments/reset\", requireAdmin, async (req, res) => {\n    try {\n      const { gameType, tournamentType } = req.body;\n      \n      if (!gameType || !tournamentType) {\n        return res.status(400).json({ error: \"gameType and tournamentType are required\" });\n      }\n\n      const tournament = await storage.resetTournament(\n        gameType,\n        tournamentType\n      );\n      res.json(tournament);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reset tournament\" });\n    }\n  });\n\n  // Update tournament QR code (admin only)\n  app.patch(\"/api/tournaments/:gameType/:tournamentType/qr\", requireAdmin, async (req, res) => {\n    try {\n      const { gameType, tournamentType } = req.params;\n      const { qrCodeUrl } = req.body;\n\n      if (!qrCodeUrl) {\n        return res.status(400).json({ error: \"qrCodeUrl is required\" });\n      }\n\n      const tournament = await storage.updateQRCode(\n        gameType as any,\n        tournamentType as any,\n        qrCodeUrl\n      );\n      res.json(tournament);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update QR code\" });\n    }\n  });\n\n  // Create registration\n  app.post(\"/api/registrations\", async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = insertRegistrationSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Validation failed\", \n          details: validationResult.error.errors \n        });\n      }\n\n      const data = validationResult.data;\n\n      // Check if tournament has available slots\n      const tournament = await storage.getTournament(\n        data.gameType as any,\n        data.tournamentType as any\n      );\n\n      if (!tournament) {\n        return res.status(404).json({ error: \"Tournament not found\" });\n      }\n\n      if (tournament.registeredCount >= tournament.maxSlots) {\n        return res.status(400).json({ error: \"Tournament is full\" });\n      }\n\n      // Create registration\n      const registration = await storage.createRegistration(data);\n      res.status(201).json(registration);\n    } catch (error) {\n      console.error(\"Error creating registration:\", error);\n      res.status(500).json({ error: \"Failed to create registration\" });\n    }\n  });\n\n  // Get all registrations (admin only - with optional filters)\n  app.get(\"/api/registrations\", requireAdmin, async (req, res) => {\n    try {\n      const { gameType, tournamentType, status } = req.query;\n\n      let registrations = await storage.getAllRegistrations();\n\n      // Apply filters\n      if (gameType) {\n        registrations = registrations.filter((r) => r.gameType === gameType);\n      }\n      if (tournamentType) {\n        registrations = registrations.filter((r) => r.tournamentType === tournamentType);\n      }\n      if (status) {\n        registrations = registrations.filter((r) => r.status === status);\n      }\n\n      res.json(registrations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch registrations\" });\n    }\n  });\n\n  // Get single registration (admin only)\n  app.get(\"/api/registrations/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const registration = await storage.getRegistration(id);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch registration\" });\n    }\n  });\n\n  // Update registration status (admin only - approve/reject)\n  app.patch(\"/api/registrations/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (![\"pending\", \"approved\", \"rejected\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n\n      // Get admin username from session\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.updateRegistrationStatus(id, status, adminUsername);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update registration\" });\n    }\n  });\n\n  // Search registrations (admin only)\n  app.get(\"/api/registrations/search/:query\", requireAdmin, async (req, res) => {\n    try {\n      const { query } = req.params;\n      const registrations = await storage.searchRegistrations(query);\n      res.json(registrations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to search registrations\" });\n    }\n  });\n\n  // Update registration details (admin only)\n  app.put(\"/api/registrations/:id/details\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.updateRegistrationDetails(id, updates, adminUsername);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update registration details\" });\n    }\n  });\n\n  // Add/update notes for registration (admin only)\n  app.patch(\"/api/registrations/:id/notes\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { notes } = req.body;\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.updateRegistrationNotes(id, notes, adminUsername);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update notes\" });\n    }\n  });\n\n  // Toggle flag on registration (admin only)\n  app.patch(\"/api/registrations/:id/flag\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.toggleRegistrationFlag(id, adminUsername);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to toggle flag\" });\n    }\n  });\n\n  // Toggle payment verification (admin only)\n  app.patch(\"/api/registrations/:id/verify-payment\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.togglePaymentVerification(id, adminUsername);\n\n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      res.json(registration);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to toggle payment verification\" });\n    }\n  });\n\n  // Delete registration (admin only)\n  app.delete(\"/api/registrations/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const registration = await storage.getRegistration(id);\n      \n      if (!registration) {\n        return res.status(404).json({ error: \"Registration not found\" });\n      }\n\n      const success = await storage.deleteRegistration(id);\n\n      if (success && adminUsername) {\n        await storage.createActivityLog({\n          adminUsername,\n          action: \"delete\",\n          targetType: \"registration\",\n          targetId: id,\n          details: JSON.stringify({ playerName: registration.playerName, teamName: registration.teamName }),\n        });\n      }\n\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete registration\" });\n    }\n  });\n\n  // Bulk approve registrations (admin only)\n  app.post(\"/api/registrations/bulk/approve\", requireAdmin, async (req, res) => {\n    try {\n      const { ids } = req.body;\n\n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ error: \"ids array is required\" });\n      }\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const results = await Promise.all(\n        ids.map(id => storage.updateRegistrationStatus(id, \"approved\", adminUsername))\n      );\n\n      const successful = results.filter(r => r !== undefined).length;\n      res.json({ success: true, count: successful });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to bulk approve\" });\n    }\n  });\n\n  // Bulk reject registrations (admin only)\n  app.post(\"/api/registrations/bulk/reject\", requireAdmin, async (req, res) => {\n    try {\n      const { ids } = req.body;\n\n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ error: \"ids array is required\" });\n      }\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const results = await Promise.all(\n        ids.map(id => storage.updateRegistrationStatus(id, \"rejected\", adminUsername))\n      );\n\n      const successful = results.filter(r => r !== undefined).length;\n      res.json({ success: true, count: successful });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to bulk reject\" });\n    }\n  });\n\n  // Bulk delete registrations (admin only)\n  app.post(\"/api/registrations/bulk/delete\", requireAdmin, async (req, res) => {\n    try {\n      const { ids } = req.body;\n\n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ error: \"ids array is required\" });\n      }\n\n      const adminId = req.session.adminId;\n      const admin = await storage.getAdmin(adminId!);\n      const adminUsername = admin?.username;\n\n      const results = await Promise.all(\n        ids.map(async (id) => {\n          const registration = await storage.getRegistration(id);\n          const success = await storage.deleteRegistration(id);\n          \n          if (success && adminUsername && registration) {\n            await storage.createActivityLog({\n              adminUsername,\n              action: \"bulk_delete\",\n              targetType: \"registration\",\n              targetId: id,\n              details: JSON.stringify({ playerName: registration.playerName }),\n            });\n          }\n          \n          return success;\n        })\n      );\n\n      const successful = results.filter(r => r === true).length;\n      res.json({ success: true, count: successful });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to bulk delete\" });\n    }\n  });\n\n  // Get activity logs (admin only)\n  app.get(\"/api/activity-logs\", requireAdmin, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getAllActivityLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Get activity logs for specific target (admin only)\n  app.get(\"/api/activity-logs/:targetType/:targetId\", requireAdmin, async (req, res) => {\n    try {\n      const { targetType, targetId } = req.params;\n      const logs = await storage.getActivityLogsByTarget(targetType, targetId);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Admin login\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password are required\" });\n      }\n\n      const admin = await storage.getAdminByUsername(username);\n\n      if (!admin) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, admin.password);\n\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Create session\n      req.session.adminId = admin.id;\n      \n      res.json({ \n        success: true, \n        admin: { id: admin.id, username: admin.username } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Admin logout\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    try {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ error: \"Logout failed\" });\n        }\n        res.clearCookie(\"connect.sid\");\n        res.json({ success: true });\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Logout failed\" });\n    }\n  });\n\n  // Check admin session status\n  app.get(\"/api/admin/check\", (req, res) => {\n    if (req.session.adminId) {\n      res.json({ authenticated: true });\n    } else {\n      res.json({ authenticated: false });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15190},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"replit.md":{"content":"# BGMI & Free Fire Tournament Platform\n\n## Overview\n\nThis is a professional tournament management platform for BGMI (Battlegrounds Mobile India) and Free Fire mobile games. The platform enables tournament organizers to manage registrations for different game modes (Solo, Duo, Squad) with real-time slot tracking, payment verification via QR codes, and an admin dashboard for managing participant approvals.\n\n**Key Features:**\n- Multi-game support (BGMI and Free Fire)\n- Three tournament modes per game (Solo, Duo, Squad)\n- Real-time slot availability tracking with circular progress indicators\n- Payment submission with QR code and transaction verification\n- Advanced admin dashboard with statistics, bulk operations, and Excel export\n- Enhanced registration form with multi-step progress, auto-save, and image compression\n- Game-specific theming with animated hero banners\n- Countdown timers and urgency messaging for slots\n- Session-based authentication for admin access\n- Professional, modern UI with dark mode design and smooth animations\n\n## Recent Enhancements (Latest Update - October 23, 2025)\n\n### Dark Mode Support Added\n- **Fully functional dark mode with theme toggle**\n  - ThemeProvider component manages theme state with React Context\n  - Theme persists to localStorage and syncs across sessions\n  - Detects system preference on first visit\n  - Smooth theme toggle button with Sun/Moon icons in Header\n  - All existing colors and design preserved - seamless light/dark transition\n\n### Critical Database Migration & Performance Optimizations\n- **Migrated from in-memory storage to PostgreSQL database**\n  - Replaced `MemStorage` class with `DbStorage` using Drizzle ORM\n  - All data now persists across server restarts and deployments\n  - Fixes data loss issues when deploying to Vercel\n  - Database initialization happens before server starts to ensure data integrity\n  - Added capacity enforcement in createRegistration to prevent slot overflow\n  \n- **Fixed form state management**\n  - Forms now properly reset after successful submission\n  - LocalStorage is cleared on submission success\n  - Better error handling - form returns to step 2 on submission failure\n  - Fixed race condition where multiple users could register simultaneously\n\n- **Performance optimizations for image compression**\n  - Reduced max dimension from 1200px to 800px for faster processing\n  - More aggressive compression (quality tiers: 0.6/0.4/0.2)\n  - Added 30-second timeout protection with proper cleanup\n  - Eliminates lag during form submission\n\n## Previous Enhancements\n\n### Admin Dashboard Improvements\n- **Comprehensive Statistics Overview**: Total registrations across all games, total revenue from approved entries, pending approvals with animated indicators, approval rate percentage\n- **QR Code Management**: Enhanced dialog with current QR preview, drag-and-drop upload zone, file validation and preview\n- **Bulk Operations**: Approve all pending registrations, bulk export selected items to Excel, print-friendly view generation\n- **Improved Registration Cards**: Avatar components with player initials, better visual separation, highlighted payment sections, relative timestamps (e.g., \"2 hours ago\")\n- **Pagination**: 10 items per page with Previous/Next navigation, numbered page buttons, auto-reset on filter change, \"Select All on Page\" functionality\n\n### Home Page Enhancements\n- **5-Step \"How It Works\" Section**: Step-by-step instructions with numbered cards, icons, and staggered animations\n- **FAQ Section**: Comprehensive Q&A using Accordion component covering registration, match details, disconnections, prizes, and refunds\n- **Features Showcase**: 6 key benefits in responsive grid layout with icons and hover animations (Real-time Tracking, Instant Approval, Secure Payments, Fair Play, 24h Prizes, 24/7 Support)\n- **Enhanced Hero Animations**: Staggered animations for stats, fade-in effects, subtle float animation for badges\n- **Testimonials Section**: Social proof with player reviews, 5-star ratings, and avatar placeholders\n\n### Registration Form Improvements\n- **Multi-Step Progress Indicator**: Visual progress bar showing Team/Player Details → Payment → Review & Submit with dynamic completion percentage\n- **Advanced File Upload**: 5MB size validation, file name and size display, \"Change Image\" and \"Remove\" buttons, automatic image compression for files >1MB\n- **Helpful Hints & Tooltips**: Context-sensitive help text for WhatsApp and Transaction ID fields with info icons\n- **Real-time Validation**: Instant feedback as user types, green checkmarks for valid fields, required field indicators\n- **Form Auto-Save**: localStorage persistence with unique keys per game/tournament, automatic restoration on page refresh, unsaved changes warning\n\n### Tournament Page Enhancements\n- **Enhanced Hero Banners**: Multiple gradient overlays for text readability, 15 animated floating particles, larger game titles (text-8xl), animated trophy icons\n- **Game-Specific Theming**: BGMI orange and Free Fire red colors applied consistently to borders, badges, highlights, icons, and progress indicators\n- **Circular Slot Counter**: SVG-based progress indicator with percentage display, animated count transitions, color-coded status (green/yellow/red), urgency messaging\n- **Live Countdown Timer**: Hours:minutes:seconds display in separate animated boxes, game-specific colors, updates every second\n- **Enhanced Rules Accordion**: Unique icons for each section (Shield, CreditCard, Trophy, AlertCircle), color-coded backgrounds (blue/game-color/green/red), individual rule checkmarks\n\n### Technical Improvements\n- **Framer Motion Animations**: Smooth entrance animations, scroll-triggered effects, hover states, staggered transitions throughout the application\n- **Complete Test Coverage**: All interactive elements have data-testid attributes for automated testing\n- **Default QR Code**: Integrated payment QR code image from attached assets, automatically loaded on tournament initialization\n- **React Hooks Compliance**: Fixed hooks ordering in AdminDashboard to eliminate console errors\n- **Image Compression**: Client-side compression for payment screenshots before base64 encoding (adaptive quality based on file size)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build Tool:**\n- React 18 with TypeScript\n- Vite for development and production builds\n- Wouter for client-side routing (lightweight alternative to React Router)\n\n**UI Component System:**\n- Radix UI primitives for accessible, unstyled components\n- shadcn/ui component library (New York style variant)\n- Tailwind CSS for styling with custom design tokens\n- Class Variance Authority (CVA) for component variant management\n\n**State Management:**\n- TanStack Query (React Query) for server state management\n- Auto-refetching enabled for real-time slot updates (5-second intervals on admin dashboard)\n- Optimistic updates for better UX\n\n**Form Handling:**\n- React Hook Form for form state management\n- Zod for schema validation\n- @hookform/resolvers for integration between the two\n\n**Design System:**\n- Custom color palette with game-specific branding (BGMI orange, Free Fire red)\n- Dark-mode-first approach with carefully tuned elevation layers\n- Typography system using Inter, Geist Sans, and JetBrains Mono fonts\n- Semantic color tokens for status indicators (success, warning, destructive)\n\n### Backend Architecture\n\n**Runtime & Framework:**\n- Node.js with Express.js\n- TypeScript with ESM modules\n- Development mode uses tsx for hot reloading\n\n**Session Management:**\n- express-session with MemoryStore (in-memory storage)\n- Session-based authentication for admin routes\n- HTTP-only cookies with secure flag in production\n- 24-hour session expiration\n\n**Data Storage Pattern:**\n- In-memory storage implementation (MemStorage class)\n- Interface-based design (IStorage) for potential database migration\n- Drizzle ORM schema definitions prepared for PostgreSQL migration\n- Three main entities: Admins, Tournaments, Registrations\n\n**API Design:**\n- RESTful endpoints following resource-oriented patterns\n- Middleware-based authentication for admin routes\n- JSON request/response format\n- Proper HTTP status codes and error handling\n\n**Tournament Configuration:**\n- Hardcoded tournament rules in shared schema\n- BGMI: Solo (100 players), Duo (50 teams), Squad (25 teams)\n- Free Fire: Solo (48 players), Duo (24 teams), Squad (12 teams)\n- Entry fees and prize structure defined per mode\n\n### Authentication & Authorization\n\n**Admin Authentication:**\n- bcrypt for password hashing\n- **Default Admin Credentials:**\n  - Username: `admin`\n  - Password: `admin123`\n  - *Note: For production use, change these credentials immediately after deployment*\n- Session-based auth (no JWT to avoid token management complexity)\n- Protected routes using requireAdmin middleware\n- Default admin account initialized on startup\n\n**Security Measures:**\n- HTTP-only session cookies\n- Secure cookies in production environment\n- Password hashing with bcrypt (10 rounds)\n- Session secret from environment variables\n\n### File Upload & Storage\n\n**Payment Screenshots:**\n- Base64 encoding for image storage\n- Images embedded directly in registration records\n- No external file storage service required\n- Client-side preview before submission\n\n### Project Structure\n\n```\nclient/                 # Frontend React application\n  src/\n    components/        # Reusable UI components\n      ui/             # shadcn/ui components\n    pages/            # Route-level page components\n    hooks/            # Custom React hooks\n    lib/              # Utility functions and clients\nserver/               # Backend Express application\n  routes.ts           # API route definitions\n  storage.ts          # Data storage implementation\n  index.ts            # Server entry point\nshared/               # Code shared between client and server\n  schema.ts           # Drizzle schema and Zod validators\n```\n\n### Build & Deployment\n\n**Development:**\n- Vite dev server with HMR\n- Concurrent client and server development\n- Source maps for debugging\n\n**Production Build:**\n- Vite builds frontend to dist/public\n- esbuild bundles backend to dist/index.js\n- Static file serving from Express\n- Designed for Vercel deployment\n\n**Environment Variables:**\n- DATABASE_URL: PostgreSQL connection (prepared but not yet used)\n- SESSION_SECRET: Session encryption key\n- NODE_ENV: Environment mode\n\n## External Dependencies\n\n### Core Dependencies\n\n**Frontend Libraries:**\n- @tanstack/react-query: Server state management and caching\n- react-hook-form: Form state and validation\n- @hookform/resolvers: Bridge between react-hook-form and Zod\n- zod: Schema validation\n- wouter: Lightweight routing\n- date-fns: Date formatting utilities\n\n**UI Component Libraries:**\n- @radix-ui/*: 20+ accessible component primitives (dialog, dropdown, tabs, etc.)\n- cmdk: Command palette component\n- lucide-react: Icon library\n- tailwindcss: Utility-first CSS framework\n- class-variance-authority: Component variant utilities\n- tailwind-merge & clsx: Class name utilities\n\n**Backend Libraries:**\n- express: Web application framework\n- express-session: Session middleware\n- memorystore: Memory-based session store\n- bcryptjs: Password hashing\n- drizzle-orm: TypeScript ORM (schema only, not actively used)\n- @neondatabase/serverless: Neon Postgres driver (prepared for future use)\n\n### Build Tools\n\n- vite: Frontend build tool and dev server\n- tsx: TypeScript executor for Node.js\n- esbuild: JavaScript bundler for backend\n- typescript: Type checking\n- drizzle-kit: Database schema management CLI\n\n### Replit-Specific\n\n- @replit/vite-plugin-runtime-error-modal: Error overlay\n- @replit/vite-plugin-cartographer: Development tools\n- @replit/vite-plugin-dev-banner: Development banner\n\n### Future Database Migration\n\nThe application is prepared for PostgreSQL migration:\n- Drizzle ORM schema defined in shared/schema.ts\n- drizzle.config.ts configured for PostgreSQL\n- Storage interface (IStorage) abstracts data access\n- Current implementation uses MemStorage (in-memory)\n- Migration path: Implement IStorage with Drizzle queries\n\n**Note:** While Drizzle schema uses PostgreSQL dialect, the current runtime uses in-memory storage. The database can be added later by implementing the IStorage interface with actual Drizzle ORM queries.","size_bytes":12438},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {\n    indicatorClassName?: string;\n  }\n>(({ className, value, indicatorClassName, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 bg-primary transition-all\",\n        indicatorClassName\n      )}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":902},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 13% 91%;\n\n  --card: 220 14% 98%;\n\n  --card-foreground: 220 15% 12%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 14% 96%;\n\n  --sidebar-foreground: 220 15% 12%;\n\n  --sidebar-border: 220 13% 92%;\n\n  --sidebar-primary: 215 90% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 12% 92%;\n\n  --sidebar-accent-foreground: 220 15% 12%;\n\n  --sidebar-ring: 215 90% 60%;\n\n  --popover: 220 12% 94%;\n\n  --popover-foreground: 220 15% 12%;\n\n  --popover-border: 220 13% 90%;\n\n  --primary: 215 90% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --bgmi: 25 95% 58%;\n  --bgmi-foreground: 0 0% 100%;\n\n  --freefire: 0 85% 60%;\n  --freefire-foreground: 0 0% 100%;\n\n  --success: 142 76% 45%;\n  --success-foreground: 0 0% 100%;\n\n  --secondary: 220 12% 90%;\n\n  --secondary-foreground: 220 15% 12%;\n\n  --muted: 220 12% 95%;\n\n  --muted-foreground: 220 10% 40%;\n\n  --accent: 220 12% 93%;\n\n  --accent-foreground: 220 15% 12%;\n\n  --destructive: 0 72% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 75%;\n  --ring: 215 90% 60%;\n  --chart-1: 25 95% 58%;\n  --chart-2: 215 90% 60%;\n  --chart-3: 142 76% 45%;\n  --chart-4: 0 72% 55%;\n  --chart-5: 280 65% 60%;\n\n  --font-sans: Inter, -apple-system, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 10% / 0.06), 0px 1px 2px -1px hsl(220 13% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 10% / 0.08), 0px 2px 4px -2px hsl(220 13% 10% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 10% / 0.10), 0px 3px 6px -3px hsl(220 13% 10% / 0.08);\n  --shadow-lg: 0px 10px 20px -5px hsl(220 13% 10% / 0.12), 0px 4px 8px -4px hsl(220 13% 10% / 0.10);\n  --shadow-xl: 0px 20px 30px -10px hsl(220 13% 10% / 0.15), 0px 8px 16px -8px hsl(220 13% 10% / 0.12);\n  --shadow-2xl: 0px 30px 50px -15px hsl(220 13% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 15% 16%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 15% 14%;\n\n  --sidebar-primary: 215 90% 60%;\n\n  --sidebar-primary-foreground: 220 15% 8%;\n\n  --sidebar-accent: 220 12% 16%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 215 90% 60%;\n\n  --popover: 220 12% 16%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 15% 20%;\n\n  --primary: 215 90% 60%;\n\n  --primary-foreground: 220 15% 8%;\n\n  --bgmi: 25 95% 58%;\n  --bgmi-foreground: 220 15% 8%;\n\n  --freefire: 0 85% 60%;\n  --freefire-foreground: 0 0% 100%;\n\n  --success: 142 76% 55%;\n  --success-foreground: 220 15% 8%;\n\n  --secondary: 220 12% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 12% 14%;\n\n  --muted-foreground: 220 9% 65%;\n\n  --accent: 220 12% 18%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 72% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 30%;\n  --ring: 215 90% 60%;\n  --chart-1: 25 95% 68%;\n  --chart-2: 215 90% 70%;\n  --chart-3: 142 76% 55%;\n  --chart-4: 0 85% 65%;\n  --chart-5: 280 65% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 0% / 0.35);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 0% / 0.30), 0px 1px 2px -1px hsl(220 15% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 0% / 0.35), 0px 2px 4px -2px hsl(220 15% 0% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 0% / 0.40), 0px 3px 6px -3px hsl(220 15% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -5px hsl(220 15% 0% / 0.45), 0px 4px 8px -4px hsl(220 15% 0% / 0.40);\n  --shadow-xl: 0px 20px 30px -10px hsl(220 15% 0% / 0.50), 0px 8px 16px -8px hsl(220 15% 0% / 0.45);\n  --shadow-2xl: 0px 30px 50px -15px hsl(220 15% 0% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10246},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"design_guidelines.md":{"content":"# Design Guidelines: BGMI & Free Fire Tournament Platform\n\n## Design Approach\n\n**Reference-Based Approach**: Drawing inspiration from modern gaming platforms (Discord, Steam) combined with sleek developer tools (Vercel, Linear, GitHub) to create a professional yet exciting tournament management experience.\n\n**Key Design Principles**:\n- Precision & clarity for tournament data\n- Subtle gaming excitement without overwhelming professionalism\n- Instant visual feedback for real-time slot updates\n- Trust-building through clean, organized layouts\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode Primary** (main background):\n- Base: 220 15% 8%\n- Elevated surfaces: 220 15% 12%\n- Highest elevation: 220 12% 16%\n\n**Primary Brand Colors**:\n- BGMI Orange: 25 95% 58%\n- Free Fire Red: 0 85% 60%\n- Accent Blue (CTAs): 215 90% 60%\n\n**Semantic Colors**:\n- Success (approved): 142 76% 45%\n- Warning (pending): 45 93% 58%\n- Destructive (rejected): 0 72% 55%\n- Text primary: 0 0% 98%\n- Text secondary: 220 9% 65%\n\n**Gradients** (use sparingly for hero sections):\n- Hero gradient: from 220 15% 8% via 220 15% 10% to 215 25% 15%\n\n### B. Typography\n\n**Font Families**:\n- Primary: 'Inter', -apple-system, system-ui, sans-serif\n- Headings: 'Geist Sans', 'Inter', sans-serif (slightly tighter tracking)\n- Monospace (IDs, transactions): 'JetBrains Mono', monospace\n\n**Type Scale**:\n- Hero headline: text-5xl md:text-7xl, font-bold, tracking-tight\n- Section headlines: text-3xl md:text-4xl, font-bold\n- Card titles: text-xl font-semibold\n- Body text: text-base, leading-relaxed\n- Small labels: text-sm text-muted-foreground\n- Metadata: text-xs font-medium text-muted-foreground\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n\n**Container Strategy**:\n- Max width: max-w-7xl mx-auto\n- Page padding: px-4 md:px-6 lg:px-8\n- Section spacing: py-16 md:py-24 lg:py-32\n\n**Grid Patterns**:\n- Tournament cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- Admin dashboard: grid-cols-1 lg:grid-cols-12 (sidebar + main content)\n- Form layouts: Single column on mobile, max-w-2xl centered\n\n### D. Component Library\n\n**Navigation Header**:\n- Fixed top, backdrop-blur-xl with bg-background/80\n- Height: h-16\n- Logo left, navigation center, admin link right\n- Border bottom: border-b border-border/40\n\n**Hero Section** (Homepage):\n- Full viewport height with gradient background\n- Large headline with gaming-themed tagline\n- Two prominent CTAs: \"Join BGMI Tournament\" and \"Join Free Fire Tournament\"\n- Floating stat cards showing live tournament stats (total players, active tournaments)\n- Subtle animated gradient orbs in background (CSS only, no heavy animations)\n\n**Tournament Tabs**:\n- Horizontal tab list with rounded full backgrounds for active state\n- Tab panels with smooth transitions\n- Icons: Trophy for Solo, Users for Duo, Shield for Squad\n\n**Registration Cards**:\n- Elevated cards with border-l-4 accent in game color (orange for BGMI, red for Free Fire)\n- Header: Game type badge, slot counter with pulsing dot if available\n- Body: Rules accordion, pricing breakdown table, registration form\n- Footer: Payment QR code with upload area\n\n**Forms**:\n- Floating labels on dark input backgrounds (bg-background/50 border border-border)\n- Focus ring: ring-2 ring-primary ring-offset-2 ring-offset-background\n- Input groups for player details with numbered badges\n- File upload: Dashed border dropzone with drag-and-drop feedback\n- Submit button: Full width on mobile, max-w-xs on desktop, with loading spinner state\n\n**Admin Dashboard Cards**:\n- Registration cards in masonry layout\n- Team/player name as bold header\n- Player details in compact table format\n- Payment screenshot as clickable thumbnail (opens modal)\n- Action buttons: Approve (green), Reject (red) with confirmation dialog\n- Status badge: Pill-shaped with dot indicator\n\n**Slot Counter Display**:\n- Large numeric display: text-4xl font-bold with fraction format \"24/25\"\n- Progress bar beneath with gradient fill\n- Color coding: Green (>50% available), Yellow (20-50%), Red (<20%)\n- Live update animation: Brief scale and glow effect on change\n\n**Modal/Dialog**:\n- Centered overlay with backdrop-blur-sm\n- Max width: max-w-2xl\n- Padding: p-6\n- Close button in top-right corner\n- Payment screenshot viewer: Full-size image with transaction ID overlay\n\n### E. Animations\n\n**Subtle Interactions Only**:\n- Page transitions: None (instant navigation)\n- Card hover: transform scale-[1.02] duration-200\n- Button hover: Built-in shadcn/ui states only\n- Slot counter update: Animate count change with spring transition\n- Form submission: Button transform to spinner\n- Toast notifications: Slide in from top-right\n\n**Prohibited**:\n- Scroll-triggered animations\n- Parallax effects\n- Complex SVG animations\n- Auto-playing carousels\n\n## Page-Specific Guidelines\n\n### Homepage\n\n**Structure**:\n1. Hero: Full viewport with gradient, headline \"Join India's Most Professional Gaming Tournaments\", two game CTAs, live stats overlay\n2. Games Overview: Two-column grid (BGMI left, Free Fire right) with game logos, brief descriptions, tournament types badges\n3. How It Works: Three-step process with numbered icons (Register → Pay → Compete)\n4. Prize Pool: Table layout showing all tournament types and prize breakdowns\n5. Footer: Links, contact, social media\n\n**Images**: Use large hero background image of competitive gaming setup (blurred, low opacity as overlay)\n\n### BGMI/Free Fire Tournament Pages\n\n**Structure**:\n1. Page header: Game logo, breadcrumb navigation\n2. Tabs: Solo | Duo | Squad (sticky below header)\n3. Per tab: Rules section (collapsible accordion), Slot counter (prominent), Pricing table, Registration form, Payment section\n4. Sidebar: Quick stats, upcoming matches, support contact\n\n**Images**: Game-specific character artwork in page header (medium size, not full hero)\n\n### Admin Dashboard\n\n**Structure**:\n1. Top bar: Game selector dropdown, logout button\n2. Sidebar: Tournament type filters (Solo/Duo/Squad), status filters (All/Pending/Approved/Rejected)\n3. Main area: Registration cards grid with filters applied\n4. Bottom bar: Total count, pagination\n\n**Images**: None (data-focused interface)\n\n## Accessibility & Responsiveness\n\n- Maintain WCAG AA contrast ratios throughout\n- Focus indicators on all interactive elements\n- Keyboard navigation support for all forms\n- Mobile: Stack all multi-column layouts to single column\n- Touch targets: Minimum 44x44px\n- Form validation: Inline error messages below inputs with red text and icon","size_bytes":6569},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Admin users table\nexport const admins = pgTable(\"admins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertAdminSchema = createInsertSchema(admins).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\nexport type Admin = typeof admins.$inferSelect;\n\n// Tournaments table for tracking slots\nexport const tournaments = pgTable(\"tournaments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameType: text(\"game_type\").notNull(), // \"bgmi\" | \"freefire\"\n  tournamentType: text(\"tournament_type\").notNull(), // \"solo\" | \"duo\" | \"squad\"\n  registeredCount: integer(\"registered_count\").notNull().default(0),\n  maxSlots: integer(\"max_slots\").notNull(),\n  qrCodeUrl: text(\"qr_code_url\"),\n  isActive: integer(\"is_active\").notNull().default(1), // 1 = true, 0 = false\n});\n\nexport const insertTournamentSchema = createInsertSchema(tournaments).pick({\n  gameType: true,\n  tournamentType: true,\n  maxSlots: true,\n  qrCodeUrl: true,\n});\n\nexport type InsertTournament = z.infer<typeof insertTournamentSchema>;\nexport type Tournament = typeof tournaments.$inferSelect;\n\n// Registrations table\nexport const registrations = pgTable(\"registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameType: text(\"game_type\").notNull(), // \"bgmi\" | \"freefire\"\n  tournamentType: text(\"tournament_type\").notNull(), // \"solo\" | \"duo\" | \"squad\"\n  teamName: text(\"team_name\"),\n  \n  // Team leader / Solo player\n  playerName: text(\"player_name\").notNull(),\n  gameId: text(\"game_id\").notNull(),\n  whatsapp: text(\"whatsapp\").notNull(),\n  \n  // Additional players for duo/squad\n  player2Name: text(\"player2_name\"),\n  player2GameId: text(\"player2_game_id\"),\n  \n  player3Name: text(\"player3_name\"),\n  player3GameId: text(\"player3_game_id\"),\n  \n  player4Name: text(\"player4_name\"),\n  player4GameId: text(\"player4_game_id\"),\n  \n  // Payment info\n  paymentScreenshot: text(\"payment_screenshot\"),\n  transactionId: text(\"transaction_id\").notNull(),\n  paymentVerified: integer(\"payment_verified\").default(0), // 0 = not verified, 1 = verified\n  \n  // Admin fields\n  adminNotes: text(\"admin_notes\"),\n  isFlagged: integer(\"is_flagged\").default(0), // 0 = not flagged, 1 = flagged\n  \n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\" | \"approved\" | \"rejected\"\n  submittedAt: timestamp(\"submitted_at\").notNull().default(sql`now()`),\n  lastModifiedAt: timestamp(\"last_modified_at\"),\n  lastModifiedBy: text(\"last_modified_by\"),\n});\n\n// Activity logs table\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminUsername: text(\"admin_username\").notNull(),\n  action: text(\"action\").notNull(), // \"approve\", \"reject\", \"delete\", \"edit\", \"flag\", etc.\n  targetType: text(\"target_type\").notNull(), // \"registration\", \"tournament\", \"qr_code\"\n  targetId: text(\"target_id\").notNull(),\n  details: text(\"details\"), // JSON string with action details\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n});\n\nexport const insertRegistrationSchema = createInsertSchema(registrations).omit({\n  id: true,\n  submittedAt: true,\n}).extend({\n  gameType: z.enum([\"bgmi\", \"freefire\"]),\n  tournamentType: z.enum([\"solo\", \"duo\", \"squad\"]),\n  teamName: z.string().optional(),\n  playerName: z.string().min(1, \"Player name is required\"),\n  gameId: z.string().min(1, \"Game ID is required\"),\n  whatsapp: z.string().min(10, \"Valid WhatsApp number required\"),\n  player2Name: z.string().optional(),\n  player2GameId: z.string().optional(),\n  player3Name: z.string().optional(),\n  player3GameId: z.string().optional(),\n  player4Name: z.string().optional(),\n  player4GameId: z.string().optional(),\n  paymentScreenshot: z.string().optional(),\n  transactionId: z.string().min(1, \"Transaction ID is required\"),\n  status: z.enum([\"pending\", \"approved\", \"rejected\"]).default(\"pending\"),\n});\n\nexport type InsertRegistration = z.infer<typeof insertRegistrationSchema>;\nexport type Registration = typeof registrations.$inferSelect;\n\n// Activity log schema\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\n// Tournament configuration constants\nexport const TOURNAMENT_CONFIG = {\n  bgmi: {\n    solo: { maxSlots: 100, entryFee: 20, winner: 350, runnerUp: 250, perKill: 9, maxPlayers: 1 },\n    duo: { maxSlots: 50, entryFee: 40, winner: 350, runnerUp: 250, perKill: 9, maxPlayers: 2 },\n    squad: { maxSlots: 25, entryFee: 80, winner: 350, runnerUp: 250, perKill: 9, maxPlayers: 4 },\n  },\n  freefire: {\n    solo: { maxSlots: 48, entryFee: 20, winner: 350, runnerUp: 150, perKill: 5, maxPlayers: 1 },\n    duo: { maxSlots: 24, entryFee: 40, winner: 350, runnerUp: 150, perKill: 5, maxPlayers: 2 },\n    squad: { maxSlots: 12, entryFee: 80, winner: 350, runnerUp: 150, perKill: 5, maxPlayers: 4 },\n  },\n} as const;\n\nexport type GameType = \"bgmi\" | \"freefire\";\nexport type TournamentType = \"solo\" | \"duo\" | \"squad\";\n","size_bytes":5453},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Trophy, Shield, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\n\nexport function Header() {\n  const [location] = useLocation();\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 border-b border-border/40 bg-background/80 backdrop-blur-xl\">\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center gap-2 hover-elevate active-elevate-2 rounded-md px-3 py-2\" data-testid=\"link-home\">\n            <Trophy className=\"w-6 h-6 text-primary\" />\n            <span className=\"text-xl font-bold tracking-tight\">\n              Game<span className=\"text-primary\">Arena</span>\n            </span>\n          </Link>\n\n          {/* Navigation */}\n          <nav className=\"hidden md:flex items-center gap-1\">\n            <Link href=\"/\" data-testid=\"link-nav-home\">\n              <Button \n                variant={location === \"/\" ? \"secondary\" : \"ghost\"} \n                size=\"sm\"\n                className=\"font-medium\"\n              >\n                Home\n              </Button>\n            </Link>\n            <Link href=\"/bgmi\" data-testid=\"link-nav-bgmi\">\n              <Button \n                variant={location === \"/bgmi\" ? \"secondary\" : \"ghost\"} \n                size=\"sm\"\n                className=\"font-medium\"\n              >\n                BGMI\n              </Button>\n            </Link>\n            <Link href=\"/freefire\" data-testid=\"link-nav-freefire\">\n              <Button \n                variant={location === \"/freefire\" ? \"secondary\" : \"ghost\"} \n                size=\"sm\"\n                className=\"font-medium\"\n              >\n                Free Fire\n              </Button>\n            </Link>\n          </nav>\n\n          {/* Theme Toggle & Admin Link */}\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Link href=\"/admin/login\" data-testid=\"link-admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                <User className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Admin</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2405},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Trophy, Users, Target, Zap, Shield, Award, ArrowRight, GamepadIcon, CreditCard, FileText, CheckCircle, Clock, Star, TrendingUp, Lock, Medal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport bgmiCardImage from \"@assets/generated_images/BGMI_game_card_image_01a91a4f.png\";\nimport freeFireCardImage from \"@assets/generated_images/Free_Fire_game_card_image_cf60f82b.png\";\nimport heroBackground from \"@assets/generated_images/Gaming_tournament_hero_background_59a53abb.png\";\nimport { motion, useScroll, useTransform, useInView, useMotionValue, useSpring, AnimatePresence } from \"framer-motion\";\nimport { useRef, useState, useEffect } from \"react\";\nimport CountUp from \"react-countup\";\n\nexport default function Home() {\n  const heroRef = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: heroRef,\n    offset: [\"start start\", \"end start\"]\n  });\n\n  // Parallax effects for hero background\n  const y = useTransform(scrollYProgress, [0, 1], [\"0%\", \"50%\"]);\n  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);\n  const scale = useTransform(scrollYProgress, [0, 1], [1, 1.2]);\n\n  // Spring physics for smooth animations\n  const springConfig = { stiffness: 100, damping: 20, restDelta: 0.001 };\n\n  // Container variants with stagger\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.15,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        type: \"spring\",\n        ...springConfig\n      }\n    }\n  };\n\n  // Floating animation for badges\n  const floatingVariants = {\n    animate: {\n      y: [0, -10, 0],\n      transition: {\n        duration: 3,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  // Pulse animation for badges\n  const pulseVariants = {\n    animate: {\n      scale: [1, 1.05, 1],\n      transition: {\n        duration: 2,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  // Card hover variants\n  const cardHoverVariants = {\n    rest: { scale: 1 },\n    hover: { \n      scale: 1.03,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 10\n      }\n    }\n  };\n\n  // Icon hover variants\n  const iconHoverVariants = {\n    rest: { rotate: 0, scale: 1 },\n    hover: { \n      rotate: 10,\n      scale: 1.2,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 10\n      }\n    }\n  };\n\n  // Gradient animation\n  const [gradientPosition, setGradientPosition] = useState({ x: 50, y: 50 });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section ref={heroRef} className=\"relative pt-32 pb-20 md:pt-40 md:pb-32 overflow-hidden\">\n        {/* Background Image with Parallax */}\n        <motion.div \n          style={{ scale }}\n          className=\"absolute inset-0\"\n        >\n          <img \n            src={heroBackground} \n            alt=\"Gaming Tournament Background\"\n            className=\"w-full h-full object-cover opacity-40 dark:opacity-30\"\n          />\n        </motion.div>\n        \n        {/* Multiple Gradient Overlays for Text Visibility */}\n        <div className=\"absolute inset-0 bg-gradient-to-b from-background/80 via-background/70 to-background\" />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-background/60 via-transparent to-background/60\" />\n        <motion.div \n          style={{ y, opacity }}\n          className=\"absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-primary/5 via-transparent to-transparent\"\n        />\n        \n        {/* Animated floating orbs */}\n        <motion.div\n          animate={{\n            x: [0, 100, 0],\n            y: [0, -100, 0],\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n          className=\"absolute top-20 left-10 w-64 h-64 bg-bgmi/10 rounded-full blur-3xl\"\n        />\n        <motion.div\n          animate={{\n            x: [0, -100, 0],\n            y: [0, 100, 0],\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n          className=\"absolute bottom-20 right-10 w-64 h-64 bg-freefire/10 rounded-full blur-3xl\"\n        />\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <div className=\"text-center space-y-8\">\n            <motion.div\n              variants={floatingVariants}\n              animate=\"animate\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6 }}\n              className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20\"\n            >\n              <motion.div \n                animate={{\n                  scale: [1, 1.2, 1],\n                }}\n                transition={{\n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n                className=\"flex items-center justify-center\"\n              >\n                <Zap className=\"w-4 h-4 text-primary\" />\n              </motion.div>\n              <span className=\"text-sm font-medium text-primary\">Join India's Most Professional Gaming Tournaments</span>\n            </motion.div>\n            \n            <motion.h1 \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1, type: \"spring\", ...springConfig }}\n              className=\"text-5xl md:text-7xl font-bold tracking-tight leading-none\"\n            >\n              Compete in <br />\n              <motion.span \n                animate={{\n                  backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n                }}\n                transition={{\n                  duration: 5,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n                style={{\n                  backgroundSize: \"200% 200%\"\n                }}\n                className=\"bg-gradient-to-r from-bgmi via-primary to-freefire bg-clip-text text-transparent\"\n              >\n                BGMI & Free Fire\n              </motion.span>\n            </motion.h1>\n            \n            <motion.p \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2, type: \"spring\", ...springConfig }}\n              className=\"text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\"\n            >\n              Professional tournaments with real-time slot tracking, secure payments, and exciting prize pools. Register now and showcase your skills!\n            </motion.p>\n            \n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3, type: \"spring\", ...springConfig }}\n              className=\"flex flex-wrap items-center justify-center gap-4\"\n            >\n              <Link href=\"/bgmi\" data-testid=\"button-bgmi-cta\">\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                >\n                  <Button size=\"lg\" className=\"gap-2 text-base font-semibold h-12 px-8 bg-bgmi hover:bg-bgmi/90 text-white relative overflow-hidden group\">\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      initial={{ x: \"-100%\" }}\n                      whileHover={{ x: \"100%\" }}\n                      transition={{ duration: 0.6 }}\n                    />\n                    <span className=\"relative\">Join BGMI Tournament</span>\n                    <motion.div\n                      animate={{ x: [0, 5, 0] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <ArrowRight className=\"w-5 h-5\" />\n                    </motion.div>\n                  </Button>\n                </motion.div>\n              </Link>\n              <Link href=\"/freefire\" data-testid=\"button-freefire-cta\">\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                >\n                  <Button size=\"lg\" variant=\"outline\" className=\"gap-2 text-base font-semibold h-12 px-8 border-freefire/30 text-freefire hover:bg-freefire/10 relative overflow-hidden group\">\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-freefire/10 to-transparent\"\n                      initial={{ x: \"-100%\" }}\n                      whileHover={{ x: \"100%\" }}\n                      transition={{ duration: 0.6 }}\n                    />\n                    <span className=\"relative\">Join Free Fire Tournament</span>\n                    <motion.div\n                      animate={{ x: [0, 5, 0] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <ArrowRight className=\"w-5 h-5\" />\n                    </motion.div>\n                  </Button>\n                </motion.div>\n              </Link>\n            </motion.div>\n\n            {/* Quick Stats with Stagger Animation and Counter */}\n            <motion.div \n              variants={containerVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              className=\"grid grid-cols-3 gap-4 md:gap-8 max-w-2xl mx-auto pt-8\"\n            >\n              <motion.div variants={itemVariants} className=\"text-center\" data-testid=\"stat-prize\">\n                <motion.div \n                  className=\"text-3xl md:text-4xl font-bold text-foreground\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ type: \"spring\", stiffness: 200, damping: 10, delay: 0.5 }}\n                >\n                  ₹<CountUp end={350} duration={2} delay={0.5} />\n                </motion.div>\n                <div className=\"text-xs md:text-sm text-muted-foreground mt-1\">Winner Prize</div>\n              </motion.div>\n              <motion.div variants={itemVariants} className=\"text-center\" data-testid=\"stat-modes\">\n                <motion.div \n                  className=\"text-3xl md:text-4xl font-bold text-foreground\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ type: \"spring\", stiffness: 200, damping: 10, delay: 0.6 }}\n                >\n                  <CountUp end={6} duration={2} delay={0.6} />\n                </motion.div>\n                <div className=\"text-xs md:text-sm text-muted-foreground mt-1\">Tournament Modes</div>\n              </motion.div>\n              <motion.div variants={itemVariants} className=\"text-center\" data-testid=\"stat-slots\">\n                <motion.div \n                  className=\"text-3xl md:text-4xl font-bold text-foreground\"\n                  animate={{\n                    color: [\"hsl(var(--foreground))\", \"hsl(var(--primary))\", \"hsl(var(--foreground))\"]\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\"\n                  }}\n                >\n                  Live\n                </motion.div>\n                <div className=\"text-xs md:text-sm text-muted-foreground mt-1\">Real-time Slots</div>\n              </motion.div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Animated Divider */}\n      <motion.div \n        initial={{ scaleX: 0 }}\n        whileInView={{ scaleX: 1 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent\"\n      />\n\n      {/* Game Cards Section */}\n      <section className=\"py-16 md:py-24 bg-muted/30 relative overflow-hidden\">\n        {/* Background pattern */}\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `radial-gradient(circle at 2px 2px, currentColor 1px, transparent 1px)`,\n            backgroundSize: '32px 32px'\n          }} />\n        </div>\n\n        <div className=\"relative max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Choose Your Game</h2>\n            <p className=\"text-muted-foreground text-lg\">Select your preferred battle royale game and tournament mode</p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* BGMI Card */}\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, type: \"spring\", ...springConfig }}\n            >\n            <motion.div\n              variants={cardHoverVariants}\n              whileHover=\"hover\"\n              initial=\"rest\"\n            >\n            <Card className=\"relative overflow-visible hover-elevate transition-all duration-200 group\" data-testid=\"card-bgmi\">\n              <motion.div \n                className=\"absolute top-0 right-0 w-32 h-32 bg-bgmi/10 rounded-full blur-3xl\"\n                animate={{\n                  scale: [1, 1.2, 1],\n                  opacity: [0.3, 0.5, 0.3]\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              />\n              <div className=\"relative h-48 overflow-hidden rounded-t-lg\">\n                <motion.img \n                  src={bgmiCardImage} \n                  alt=\"BGMI Tournament\" \n                  className=\"w-full h-full object-cover\"\n                  whileHover={{ scale: 1.1 }}\n                  transition={{ duration: 0.6, ease: \"easeOut\" }}\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-card via-card/60 to-transparent\" />\n              </div>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-2xl mb-2\">BGMI</CardTitle>\n                    <CardDescription className=\"text-base\">Battlegrounds Mobile India - The ultimate battle royale experience</CardDescription>\n                  </div>\n                  <motion.div\n                    variants={pulseVariants}\n                    animate=\"animate\"\n                  >\n                    <Badge className=\"bg-bgmi/10 text-bgmi hover:bg-bgmi/20 border-bgmi/20\" data-testid=\"badge-bgmi-featured\">Featured</Badge>\n                  </motion.div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <motion.div \n                  className=\"grid grid-cols-3 gap-4\"\n                  variants={containerVariants}\n                  initial=\"hidden\"\n                  whileInView=\"visible\"\n                  viewport={{ once: true }}\n                >\n                  {[\n                    { icon: Users, title: \"Solo\", subtitle: \"100 Slots\", testId: \"card-bgmi-solo-mode\" },\n                    { icon: Users, title: \"Duo\", subtitle: \"50 Teams\", testId: \"card-bgmi-duo-mode\" },\n                    { icon: Shield, title: \"Squad\", subtitle: \"25 Teams\", testId: \"card-bgmi-squad-mode\" }\n                  ].map((mode, index) => (\n                    <motion.div\n                      key={index}\n                      variants={itemVariants}\n                      whileHover=\"hover\"\n                      initial=\"rest\"\n                      className=\"text-center p-4 rounded-lg bg-muted/50 cursor-pointer\"\n                      data-testid={mode.testId}\n                    >\n                      <motion.div variants={iconHoverVariants}>\n                        <mode.icon className=\"w-5 h-5 mx-auto mb-2 text-bgmi\" />\n                      </motion.div>\n                      <div className=\"text-sm font-semibold\">{mode.title}</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">{mode.subtitle}</div>\n                    </motion.div>\n                  ))}\n                </motion.div>\n\n                <motion.div \n                  className=\"space-y-3\"\n                  initial={{ opacity: 0 }}\n                  whileInView={{ opacity: 1 }}\n                  viewport={{ once: true }}\n                  transition={{ delay: 0.3 }}\n                >\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-bgmi-entry-fee\">\n                    <span className=\"text-muted-foreground\">Entry Fee</span>\n                    <span className=\"font-semibold\">₹20 - ₹80</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-bgmi-winner-prize\">\n                    <span className=\"text-muted-foreground\">Winner Prize</span>\n                    <motion.span \n                      className=\"font-semibold text-success\"\n                      animate={{ scale: [1, 1.05, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      ₹350\n                    </motion.span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-bgmi-per-kill\">\n                    <span className=\"text-muted-foreground\">Per Kill</span>\n                    <span className=\"font-semibold\">₹9</span>\n                  </div>\n                </motion.div>\n\n                <Link href=\"/bgmi\" data-testid=\"button-bgmi-register\">\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button className=\"w-full bg-bgmi hover:bg-bgmi/90 text-white gap-2 relative overflow-hidden group\">\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                        initial={{ x: \"-100%\" }}\n                        whileHover={{ x: \"100%\" }}\n                        transition={{ duration: 0.6 }}\n                      />\n                      <span className=\"relative\">Register Now</span>\n                      <Trophy className=\"w-4 h-4 relative\" />\n                    </Button>\n                  </motion.div>\n                </Link>\n              </CardContent>\n            </Card>\n            </motion.div>\n            </motion.div>\n\n            {/* Free Fire Card */}\n            <motion.div\n              initial={{ opacity: 0, x: 50 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, type: \"spring\", ...springConfig }}\n            >\n            <motion.div\n              variants={cardHoverVariants}\n              whileHover=\"hover\"\n              initial=\"rest\"\n            >\n            <Card className=\"relative overflow-visible hover-elevate transition-all duration-200 group\" data-testid=\"card-freefire\">\n              <motion.div \n                className=\"absolute top-0 right-0 w-32 h-32 bg-freefire/10 rounded-full blur-3xl\"\n                animate={{\n                  scale: [1, 1.2, 1],\n                  opacity: [0.3, 0.5, 0.3]\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                  delay: 0.5\n                }}\n              />\n              <div className=\"relative h-48 overflow-hidden rounded-t-lg\">\n                <motion.img \n                  src={freeFireCardImage} \n                  alt=\"Free Fire Tournament\" \n                  className=\"w-full h-full object-cover\"\n                  whileHover={{ scale: 1.1 }}\n                  transition={{ duration: 0.6, ease: \"easeOut\" }}\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-card via-card/60 to-transparent\" />\n              </div>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-2xl mb-2\">Free Fire</CardTitle>\n                    <CardDescription className=\"text-base\">Fast-paced 10-minute battle royale action</CardDescription>\n                  </div>\n                  <motion.div\n                    variants={pulseVariants}\n                    animate=\"animate\"\n                  >\n                    <Badge className=\"bg-freefire/10 text-freefire hover:bg-freefire/20 border-freefire/20\" data-testid=\"badge-freefire-popular\">Popular</Badge>\n                  </motion.div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <motion.div \n                  className=\"grid grid-cols-3 gap-4\"\n                  variants={containerVariants}\n                  initial=\"hidden\"\n                  whileInView=\"visible\"\n                  viewport={{ once: true }}\n                >\n                  {[\n                    { icon: Users, title: \"Solo\", subtitle: \"48 Slots\", testId: \"card-freefire-solo-mode\" },\n                    { icon: Users, title: \"Duo\", subtitle: \"24 Teams\", testId: \"card-freefire-duo-mode\" },\n                    { icon: Shield, title: \"Squad\", subtitle: \"12 Teams\", testId: \"card-freefire-squad-mode\" }\n                  ].map((mode, index) => (\n                    <motion.div\n                      key={index}\n                      variants={itemVariants}\n                      whileHover=\"hover\"\n                      initial=\"rest\"\n                      className=\"text-center p-4 rounded-lg bg-muted/50 cursor-pointer\"\n                      data-testid={mode.testId}\n                    >\n                      <motion.div variants={iconHoverVariants}>\n                        <mode.icon className=\"w-5 h-5 mx-auto mb-2 text-freefire\" />\n                      </motion.div>\n                      <div className=\"text-sm font-semibold\">{mode.title}</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">{mode.subtitle}</div>\n                    </motion.div>\n                  ))}\n                </motion.div>\n\n                <motion.div \n                  className=\"space-y-3\"\n                  initial={{ opacity: 0 }}\n                  whileInView={{ opacity: 1 }}\n                  viewport={{ once: true }}\n                  transition={{ delay: 0.3 }}\n                >\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-freefire-entry-fee\">\n                    <span className=\"text-muted-foreground\">Entry Fee</span>\n                    <span className=\"font-semibold\">₹20 - ₹80</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-freefire-winner-prize\">\n                    <span className=\"text-muted-foreground\">Winner Prize</span>\n                    <motion.span \n                      className=\"font-semibold text-success\"\n                      animate={{ scale: [1, 1.05, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                    >\n                      ₹350\n                    </motion.span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\" data-testid=\"text-freefire-per-kill\">\n                    <span className=\"text-muted-foreground\">Per Kill</span>\n                    <span className=\"font-semibold\">₹5</span>\n                  </div>\n                </motion.div>\n\n                <Link href=\"/freefire\" data-testid=\"button-freefire-register\">\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button className=\"w-full bg-freefire hover:bg-freefire/90 text-white gap-2 relative overflow-hidden group\">\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                        initial={{ x: \"-100%\" }}\n                        whileHover={{ x: \"100%\" }}\n                        transition={{ duration: 0.6 }}\n                      />\n                      <span className=\"relative\">Register Now</span>\n                      <Trophy className=\"w-4 h-4 relative\" />\n                    </Button>\n                  </motion.div>\n                </Link>\n              </CardContent>\n            </Card>\n            </motion.div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Animated Divider */}\n      <motion.div \n        initial={{ scaleX: 0 }}\n        whileInView={{ scaleX: 1 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent\"\n      />\n\n      {/* How It Works - Enhanced with 5 Steps */}\n      <section className=\"py-16 md:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">How It Works</h2>\n            <p className=\"text-muted-foreground text-lg\">Simple steps to join and compete in tournaments</p>\n          </motion.div>\n\n          <motion.div \n            className=\"grid md:grid-cols-2 lg:grid-cols-5 gap-6\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            {[\n              { icon: GamepadIcon, title: \"Choose Your Game\", desc: \"Select between BGMI or Free Fire based on your preference and expertise\", step: 1, color: \"primary\", testId: \"card-step-1\" },\n              { icon: Users, title: \"Select Mode\", desc: \"Choose Solo, Duo, or Squad tournament mode that suits your team\", step: 2, color: \"primary\", testId: \"card-step-2\" },\n              { icon: CreditCard, title: \"Pay Entry Fee\", desc: \"Complete payment via QR code and upload your transaction screenshot\", step: 3, color: \"primary\", testId: \"card-step-3\" },\n              { icon: FileText, title: \"Fill Registration\", desc: \"Provide team name, player details, and in-game IDs in the registration form\", step: 4, color: \"primary\", testId: \"card-step-4\" },\n              { icon: Trophy, title: \"Get Match Details\", desc: \"Receive approval and match details via WhatsApp to start competing\", step: 5, color: \"success\", testId: \"card-step-5\" }\n            ].map((step, index) => (\n              <motion.div\n                key={index}\n                variants={itemVariants}\n                whileHover={{ y: -10 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n              >\n                <Card className=\"relative h-full hover-elevate\" data-testid={step.testId}>\n                  <motion.div \n                    className=\"absolute -top-4 left-6\"\n                    animate={{\n                      y: [0, -5, 0]\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      delay: index * 0.2\n                    }}\n                  >\n                    <div className={`w-12 h-12 rounded-full bg-${step.color} flex items-center justify-center shadow-lg`}>\n                      {step.step === 5 ? (\n                        <CheckCircle className=\"w-6 h-6 text-white\" />\n                      ) : (\n                        <span className=\"text-xl font-bold text-primary-foreground\">{step.step}</span>\n                      )}\n                    </div>\n                  </motion.div>\n                  <CardHeader className=\"pt-10\">\n                    <motion.div \n                      className={`w-12 h-12 rounded-lg bg-${step.color}/10 flex items-center justify-center mb-4`}\n                      whileHover=\"hover\"\n                      initial=\"rest\"\n                      variants={iconHoverVariants}\n                    >\n                      <step.icon className={`w-6 h-6 text-${step.color}`} />\n                    </motion.div>\n                    <CardTitle className=\"text-lg\">{step.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">{step.desc}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Animated Divider */}\n      <motion.div \n        initial={{ scaleX: 0 }}\n        whileInView={{ scaleX: 1 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent\"\n      />\n\n      {/* Features Section */}\n      <section className=\"py-16 md:py-24 bg-muted/30 relative overflow-hidden\">\n        {/* Background pattern */}\n        <div className=\"absolute inset-0 opacity-5\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `radial-gradient(circle at 2px 2px, currentColor 1px, transparent 1px)`,\n            backgroundSize: '32px 32px'\n          }} />\n        </div>\n\n        <div className=\"relative max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Why Choose Us</h2>\n            <p className=\"text-muted-foreground text-lg\">Experience the best tournament platform with premium features</p>\n          </motion.div>\n\n          <motion.div \n            className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            {[\n              { icon: TrendingUp, title: \"Real-time Slot Tracking\", desc: \"Monitor available slots in real-time and never miss out on joining your favorite tournaments\", color: \"primary\", testId: \"feature-slot-tracking\" },\n              { icon: Zap, title: \"Instant Approval\", desc: \"Get approved quickly with our streamlined verification process and start playing immediately\", color: \"success\", testId: \"feature-instant-approval\" },\n              { icon: Lock, title: \"Secure Payments\", desc: \"Safe and secure payment processing through UPI with instant confirmation and receipt\", color: \"bgmi\", testId: \"feature-secure-payments\" },\n              { icon: Shield, title: \"Fair Play Guarantee\", desc: \"Strict anti-cheat policies and monitoring to ensure fair competition for all players\", color: \"freefire\", testId: \"feature-fair-play\" },\n              { icon: Clock, title: \"24h Prize Distribution\", desc: \"Guaranteed prize distribution within 24 hours of tournament completion directly to your account\", color: \"primary\", testId: \"feature-prize-distribution\" },\n              { icon: Award, title: \"24/7 Support\", desc: \"Round-the-clock customer support to help you with any queries or issues during tournaments\", color: \"success\", testId: \"feature-support\" }\n            ].map((feature, index) => (\n              <motion.div\n                key={index}\n                variants={itemVariants}\n                whileHover={{ scale: 1.05, y: -5 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 15 }}\n              >\n                <Card className=\"hover-elevate h-full\" data-testid={feature.testId}>\n                  <CardHeader>\n                    <motion.div \n                      className={`w-12 h-12 rounded-lg bg-${feature.color}/10 flex items-center justify-center mb-4`}\n                      whileHover=\"hover\"\n                      initial=\"rest\"\n                      variants={iconHoverVariants}\n                    >\n                      <feature.icon className={`w-6 h-6 text-${feature.color}`} />\n                    </motion.div>\n                    <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{feature.desc}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Animated Divider */}\n      <motion.div \n        initial={{ scaleX: 0 }}\n        whileInView={{ scaleX: 1 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent\"\n      />\n\n      {/* Testimonials Section */}\n      <section className=\"py-16 md:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">What Players Say</h2>\n            <p className=\"text-muted-foreground text-lg\">Join thousands of satisfied players competing daily</p>\n          </motion.div>\n\n          <motion.div \n            className=\"grid md:grid-cols-3 gap-6\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            {[\n              { name: \"Rahul Kumar\", role: \"BGMI Player\", initials: \"RK\", review: \"Best tournament platform I've used! Real-time slots and instant payments make it super convenient. Won ₹350 last week!\", color: \"primary\", testId: \"testimonial-1\" },\n              { name: \"Arjun Patel\", role: \"Free Fire Player\", initials: \"AP\", review: \"Professional setup with fair play rules. Love how they track everything in real-time. My squad plays here regularly!\", color: \"freefire\", testId: \"testimonial-2\" },\n              { name: \"Vikram Singh\", role: \"BGMI Squad Leader\", initials: \"VS\", review: \"Fast approvals and prizes delivered within 24 hours as promised. Highly recommend for serious players looking to compete!\", color: \"bgmi\", testId: \"testimonial-3\" }\n            ].map((testimonial, index) => (\n              <motion.div\n                key={index}\n                variants={itemVariants}\n                whileHover={{ y: -10 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 15 }}\n              >\n                <Card className=\"hover-elevate h-full\" data-testid={testimonial.testId}>\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                      <motion.div \n                        className={`w-12 h-12 rounded-full bg-${testimonial.color}/10 flex items-center justify-center`}\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <span className={`text-lg font-bold text-${testimonial.color}`}>{testimonial.initials}</span>\n                      </motion.div>\n                      <div>\n                        <CardTitle className=\"text-base\">{testimonial.name}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex gap-1\">\n                      {[...Array(5)].map((_, i) => (\n                        <motion.div\n                          key={i}\n                          initial={{ opacity: 0, scale: 0 }}\n                          whileInView={{ opacity: 1, scale: 1 }}\n                          viewport={{ once: true }}\n                          transition={{ delay: index * 0.1 + i * 0.1 }}\n                        >\n                          <Star className=\"w-4 h-4 fill-primary text-primary\" />\n                        </motion.div>\n                      ))}\n                    </div>\n                    <p className=\"text-muted-foreground\">{testimonial.review}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Animated Divider */}\n      <motion.div \n        initial={{ scaleX: 0 }}\n        whileInView={{ scaleX: 1 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n        className=\"h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent\"\n      />\n\n      {/* FAQ Section */}\n      <section className=\"py-16 md:py-24 bg-muted/30\">\n        <div className=\"max-w-4xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-12\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Frequently Asked Questions</h2>\n            <p className=\"text-muted-foreground text-lg\">Got questions? We've got answers</p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <Accordion type=\"single\" collapsible className=\"w-full space-y-4\" data-testid=\"faq-accordion\">\n              {[\n                {\n                  question: \"How do I register for a tournament?\",\n                  answer: \"Registration is simple! First, choose your game (BGMI or Free Fire) and select your preferred tournament mode (Solo, Duo, or Squad). Then, pay the entry fee via the provided QR code and upload your payment screenshot. Finally, fill in the registration form with your team/player details and in-game IDs. Once submitted, you'll receive approval and match details on WhatsApp.\",\n                  testId: \"faq-item-1\"\n                },\n                {\n                  question: \"When will I receive match details?\",\n                  answer: \"After your registration is approved (usually within 15-30 minutes), you'll receive the complete match details including room ID, password, match timing, and tournament rules via WhatsApp. Make sure to provide a valid WhatsApp number during registration.\",\n                  testId: \"faq-item-2\"\n                },\n                {\n                  question: \"What happens if I disconnect during the match?\",\n                  answer: \"If you disconnect during a match, you can rejoin using the same room ID and password shared earlier. However, you must reconnect within 5 minutes. If you're unable to reconnect, your kills and position up to that point will still be counted for prize calculation. Please note that disconnections due to network issues are not eligible for refunds.\",\n                  testId: \"faq-item-3\"\n                },\n                {\n                  question: \"How are prizes distributed?\",\n                  answer: \"Prizes are distributed based on your final position and total kills. The winner receives the top prize (₹350 for most tournaments), and additional rewards are given for each kill (₹9 for BGMI, ₹5 for Free Fire). After the tournament ends and results are verified, prizes are transferred directly to your registered UPI ID within 24 hours.\",\n                  testId: \"faq-item-4\"\n                },\n                {\n                  question: \"Can I get a refund if I can't participate?\",\n                  answer: \"Refunds are only available if you request cancellation at least 2 hours before the tournament start time. To request a refund, contact our support team on WhatsApp with your registration details. Refunds are processed within 24-48 hours to your original payment method.\",\n                  testId: \"faq-item-5\"\n                }\n              ].map((faq, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <AccordionItem value={`item-${index + 1}`} className=\"border rounded-lg px-6 bg-card\" data-testid={faq.testId}>\n                    <AccordionTrigger className=\"text-left hover:no-underline\" data-testid={`faq-trigger-${index + 1}`}>\n                      <motion.span\n                        whileHover={{ x: 5 }}\n                        transition={{ type: \"spring\", stiffness: 300 }}\n                      >\n                        {faq.question}\n                      </motion.span>\n                    </AccordionTrigger>\n                    <AccordionContent className=\"text-muted-foreground\" data-testid={`faq-content-${index + 1}`}>\n                      {faq.answer}\n                    </AccordionContent>\n                  </AccordionItem>\n                </motion.div>\n              ))}\n            </Accordion>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Floating CTA Section */}\n      <motion.section \n        initial={{ opacity: 0, y: 50 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        viewport={{ once: true }}\n        transition={{ duration: 0.8, type: \"spring\", ...springConfig }}\n        className=\"py-16 md:py-24\"\n      >\n        <div className=\"max-w-4xl mx-auto px-4 md:px-6 lg:px-8\">\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            transition={{ type: \"spring\", stiffness: 300 }}\n            className=\"relative overflow-hidden rounded-2xl bg-gradient-to-r from-bgmi/10 via-primary/10 to-freefire/10 p-12 text-center border border-primary/20\"\n          >\n            <motion.div\n              animate={{\n                backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n              }}\n              transition={{\n                duration: 10,\n                repeat: Infinity,\n                ease: \"linear\"\n              }}\n              style={{\n                backgroundSize: \"200% 200%\"\n              }}\n              className=\"absolute inset-0 bg-gradient-to-r from-bgmi/5 via-primary/5 to-freefire/5 opacity-50\"\n            />\n            <div className=\"relative\">\n              <motion.h2 \n                className=\"text-3xl md:text-4xl font-bold mb-4\"\n                animate={{\n                  backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n                }}\n                transition={{\n                  duration: 5,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n                style={{\n                  backgroundSize: \"200% 200%\"\n                }}\n              >\n                Ready to Compete?\n              </motion.h2>\n              <p className=\"text-muted-foreground text-lg mb-8\">Join thousands of players in India's most professional gaming tournaments</p>\n              <div className=\"flex flex-wrap items-center justify-center gap-4\">\n                <Link href=\"/bgmi\" data-testid=\"button-cta-bgmi-bottom\">\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button size=\"lg\" className=\"gap-2 bg-bgmi hover:bg-bgmi/90 text-white\">\n                      Join BGMI Now\n                      <ArrowRight className=\"w-5 h-5\" />\n                    </Button>\n                  </motion.div>\n                </Link>\n                <Link href=\"/freefire\" data-testid=\"button-cta-freefire-bottom\">\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button size=\"lg\" className=\"gap-2 bg-freefire hover:bg-freefire/90 text-white\">\n                      Join Free Fire Now\n                      <ArrowRight className=\"w-5 h-5\" />\n                    </Button>\n                  </motion.div>\n                </Link>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </motion.section>\n    </div>\n  );\n}\n","size_bytes":46106},"client/src/pages/AdminLogin.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Shield, Loader2, Info } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/login\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to the admin dashboard.\",\n      });\n      // Small delay to ensure session is set\n      setTimeout(() => {\n        setLocation(\"/admin\");\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid username or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background via-background/95 to-muted/30 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n            <Shield className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\">Admin Login</h1>\n          <p className=\"text-muted-foreground\">Access tournament management dashboard</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign In</CardTitle>\n            <CardDescription>Enter your credentials to access the admin panel</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter username\" data-testid=\"input-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"password\" placeholder=\"Enter password\" data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\" size=\"lg\" disabled={loginMutation.isPending} data-testid=\"button-login\">\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 p-4 rounded-md bg-muted/50 border border-border\">\n              <p className=\"text-xs text-muted-foreground text-center\">\n                Protected admin area. Unauthorized access is prohibited.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Default Credentials Info */}\n        <Card className=\"mt-6 border-primary/20 bg-primary/5\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex gap-3\">\n              <Info className=\"w-5 h-5 text-primary shrink-0 mt-0.5\" />\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-semibold text-foreground\">Default Admin Credentials</p>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-muted-foreground\">Username:</span>\n                    <code className=\"px-2 py-1 rounded bg-muted text-foreground font-mono text-xs\">admin</code>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-muted-foreground\">Password:</span>\n                    <code className=\"px-2 py-1 rounded bg-muted text-foreground font-mono text-xs\">admin123</code>\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  Use these credentials for first-time access\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5920},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/TournamentFullAlert.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertTriangle, InfoIcon } from \"lucide-react\";\nimport { type GameType } from \"@shared/schema\";\n\ninterface TournamentFullAlertProps {\n  gameType: GameType;\n}\n\nexport function TournamentFullAlert({ gameType }: TournamentFullAlertProps) {\n  const gameColor = gameType === \"bgmi\" ? \"text-bgmi\" : \"text-freefire\";\n  const gameBorder = gameType === \"bgmi\" ? \"border-bgmi/30\" : \"border-freefire/30\";\n  const gameBg = gameType === \"bgmi\" ? \"bg-bgmi/10\" : \"bg-freefire/10\";\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95, y: 20 }}\n      animate={{ opacity: 1, scale: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n      data-testid=\"alert-tournament-full\"\n    >\n      <Alert className={`${gameBorder} ${gameBg} border-2`}>\n        <AlertTriangle className={`h-5 w-5 ${gameColor}`} />\n        <AlertTitle className=\"text-lg font-bold\">Tournament Full!</AlertTitle>\n        <AlertDescription className=\"mt-2 space-y-2\">\n          <p className=\"text-base\">\n            This tournament has reached maximum capacity. All slots are now filled.\n          </p>\n          <div className={`flex items-start gap-2 p-3 rounded-md bg-background/50 border ${gameBorder}`}>\n            <InfoIcon className={`w-4 h-4 mt-0.5 flex-shrink-0 ${gameColor}`} />\n            <div className=\"space-y-1\">\n              <p className=\"text-sm font-medium\">What's Next?</p>\n              <ul className=\"text-sm text-muted-foreground space-y-1 list-disc list-inside\">\n                <li>Check other tournament modes that may still have available slots</li>\n                <li>Follow us for announcements about upcoming tournaments</li>\n                <li>Registered players will receive match details via WhatsApp</li>\n              </ul>\n            </div>\n          </div>\n        </AlertDescription>\n      </Alert>\n    </motion.div>\n  );\n}\n","size_bytes":1957},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first\n    const stored = localStorage.getItem(\"theme\");\n    if (stored === \"light\" || stored === \"dark\") {\n      return stored;\n    }\n    \n    // Check system preference\n    if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      return \"dark\";\n    }\n    \n    return \"light\";\n  });\n\n  useEffect(() => {\n    // Toggle the \"dark\" class on document.documentElement\n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n    \n    // Sync with localStorage\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1368},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"relative\"\n    >\n      <Sun \n        className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" \n        data-testid=\"icon-sun\"\n      />\n      <Moon \n        className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" \n        data-testid=\"icon-moon\"\n      />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":847},"DEPLOYMENT_GUIDE.md":{"content":"# Vercel Deployment Guide\n\n## Prerequisites\n- A Vercel account (sign up at https://vercel.com)\n- PostgreSQL database (use Neon, Supabase, or Vercel Postgres)\n- GitHub repository (optional, but recommended)\n\n## Step 1: Prepare Your Database\n\n### Option A: Using Neon (Recommended)\n1. Go to https://neon.tech and create a free account\n2. Create a new project\n3. Copy the connection string (starts with `postgresql://`)\n4. Save it for later - you'll need it as `DATABASE_URL`\n\n### Option B: Using Vercel Postgres\n1. In your Vercel dashboard, go to Storage\n2. Create a new Postgres database\n3. Copy the connection string\n4. It will automatically be added to your environment variables\n\n## Step 2: Deploy to Vercel\n\n### Method 1: Deploy via GitHub (Recommended)\n\n1. **Push your code to GitHub**\n   ```bash\n   git add .\n   git commit -m \"Ready for deployment\"\n   git push origin main\n   ```\n\n2. **Connect to Vercel**\n   - Go to https://vercel.com\n   - Click \"Add New Project\"\n   - Import your GitHub repository\n   - Vercel will auto-detect the framework\n\n3. **Configure Environment Variables**\n   Click on \"Environment Variables\" and add:\n   \n   ```\n   DATABASE_URL=postgresql://your_connection_string_here\n   SESSION_SECRET=your-secure-random-string-here\n   NODE_ENV=production\n   ```\n\n   **Generate a secure SESSION_SECRET:**\n   ```bash\n   node -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n   ```\n\n4. **Deploy**\n   - Click \"Deploy\"\n   - Wait for the build to complete (2-3 minutes)\n\n### Method 2: Deploy via Vercel CLI\n\n1. **Install Vercel CLI**\n   ```bash\n   npm install -g vercel\n   ```\n\n2. **Login to Vercel**\n   ```bash\n   vercel login\n   ```\n\n3. **Deploy**\n   ```bash\n   vercel\n   ```\n   \n   Follow the prompts and when asked about environment variables, add:\n   - `DATABASE_URL`\n   - `SESSION_SECRET`\n   - `NODE_ENV=production`\n\n4. **Deploy to Production**\n   ```bash\n   vercel --prod\n   ```\n\n## Step 3: Initialize Database Schema\n\nAfter your first deployment:\n\n1. **Using Vercel Dashboard**\n   - Go to your project settings\n   - Navigate to \"Environment Variables\"\n   - Verify `DATABASE_URL` is set\n\n2. **Push Database Schema**\n   \n   You have two options:\n\n   **Option A: Local Push (Recommended)**\n   ```bash\n   # Set the DATABASE_URL locally\n   export DATABASE_URL=\"your_production_database_url\"\n   \n   # Push schema to production database\n   npm run db:push -- --force\n   ```\n\n   **Option B: Via Vercel CLI**\n   ```bash\n   vercel env pull .env.production\n   npm run db:push -- --force\n   ```\n\n## Step 4: Create Admin Account\n\nAfter deploying, the application will automatically create a default admin account:\n\n**Default Admin Credentials:**\n- Username: `admin`\n- Password: `admin123`\n\n**⚠️ IMPORTANT: Change the default password immediately after first login!**\n\nTo create a new admin or change password, you'll need to access your database and update the `admins` table directly.\n\n## Step 5: Verify Deployment\n\n1. **Visit your deployed site**\n   - Your site will be available at `https://your-project-name.vercel.app`\n\n2. **Test the following:**\n   - Home page loads correctly\n   - BGMI tournament page works\n   - Free Fire tournament page works\n   - Admin login works\n   - Forms can be submitted\n   - Dark mode toggle works\n\n3. **Check Common Issues:**\n   - If you see \"Database not found\" errors, verify DATABASE_URL is set correctly\n   - If forms don't submit, check browser console for errors\n   - If images don't load, verify the build completed successfully\n\n## Step 6: Custom Domain (Optional)\n\n1. In Vercel dashboard, go to your project\n2. Click on \"Settings\" → \"Domains\"\n3. Add your custom domain\n4. Follow Vercel's DNS configuration instructions\n\n## Environment Variables Reference\n\n### Required Variables\n```env\nDATABASE_URL=postgresql://user:password@host:port/database\nSESSION_SECRET=your-64-character-random-string\nNODE_ENV=production\n```\n\n### Optional Variables\n```env\n# If using custom admin credentials\nADMIN_USERNAME=your_admin_username\nADMIN_PASSWORD=your_admin_password\n```\n\n## Troubleshooting\n\n### Build Fails\n1. Check the build logs in Vercel dashboard\n2. Verify all dependencies are in `package.json`\n3. Make sure TypeScript compiles locally: `npm run check`\n\n### Database Connection Fails\n1. Verify DATABASE_URL is correct\n2. Check if your database allows connections from Vercel's IP ranges\n3. Ensure SSL is enabled in connection string if required\n\n### Forms Not Working\n1. Check browser console for errors\n2. Verify API routes are working: visit `/api/tournaments`\n3. Check if CORS is blocking requests\n\n### Images Not Loading\n1. Verify images exist in `attached_assets/generated_images/`\n2. Check if Vite build includes all assets\n3. Clear browser cache and reload\n\n## Production Best Practices\n\n1. **Security**\n   - Change default admin password immediately\n   - Use strong SESSION_SECRET (at least 32 characters)\n   - Enable HTTPS (Vercel does this automatically)\n\n2. **Database**\n   - Backup your database regularly\n   - Monitor connection limits\n   - Use connection pooling for high traffic\n\n3. **Monitoring**\n   - Check Vercel Analytics for performance\n   - Monitor error logs in Vercel dashboard\n   - Set up alerts for critical errors\n\n4. **Updates**\n   - Test changes locally before deploying\n   - Use Vercel's preview deployments for testing\n   - Keep dependencies updated\n\n## Updating Your Deployment\n\n1. **Make changes locally**\n   ```bash\n   git add .\n   git commit -m \"Update description\"\n   git push origin main\n   ```\n\n2. **Vercel auto-deploys** from main branch\n   - Every push to main triggers a new deployment\n   - Preview deployments are created for pull requests\n\n3. **Manual deployment via CLI**\n   ```bash\n   vercel --prod\n   ```\n\n## Getting Help\n\n- Vercel Documentation: https://vercel.com/docs\n- Neon Documentation: https://neon.tech/docs\n- GitHub Issues: Create an issue in your repository\n\n## Success Checklist\n\n- [ ] Database created and connection string obtained\n- [ ] Environment variables configured in Vercel\n- [ ] Code deployed successfully\n- [ ] Database schema pushed\n- [ ] Admin login works\n- [ ] Tournament registration works for both games\n- [ ] Admin dashboard displays registrations\n- [ ] Dark mode works\n- [ ] All pages load without errors\n- [ ] Default admin password changed\n\n---\n\n**Congratulations! Your tournament website is now live! 🎉**\n\nYour users can now:\n- Register for BGMI and Free Fire tournaments\n- See real-time slot availability\n- Submit payment proofs\n- View tournament rules and prizes\n\nAdmin can:\n- Review and approve registrations\n- Manage tournaments\n- View analytics\n- Export data to Excel\n","size_bytes":6620}},"version":2}